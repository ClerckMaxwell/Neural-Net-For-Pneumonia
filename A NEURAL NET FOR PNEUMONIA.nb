(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 14.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    537239,       9568]
NotebookOptionsPosition[    531146,       9468]
NotebookOutlinePosition[    531590,       9485]
CellTagsIndexPosition[    531547,       9482]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["A NEURAL NETWORK FOR PNEUMONIA", "Title",
 CellChangeTimes->{{3.918469814334499*^9, 3.918469818704859*^9}, {
  3.918470049203268*^9, 
  3.918470064107413*^9}},ExpressionUUID->"d87364f4-d256-de46-b725-\
87749c7d6381"],

Cell["\<\
Raffaele Petrolo
Mat: 252120\
\>", "Text",
 CellChangeTimes->{{3.9191621258497677`*^9, 
  3.919162137746728*^9}},ExpressionUUID->"b7046ae3-66e3-4d5d-bf37-\
ffe13194c9fa"],

Cell["\<\
Andr\[OGrave] ad addestrare una net su un dataset raggi x al torace di \
pazienti affetti da polmonite batterica o virale al fine di far riconosere \
alla net una possibile infezione da polmonite. Ho un dataset composta da 500 \
immagini di cui 250 appartengono  a pazienti con polmonite e 250 a persone \
senza polmonite. Utilizzer\[OGrave] la net VGG 16.\
\>", "Text",
 CellChangeTimes->{{3.9184698242188244`*^9, 3.9184699257154255`*^9}, {
  3.9184704650962276`*^9, 3.918470606317896*^9}, {3.918470777740017*^9, 
  3.9184707857821026`*^9}, {3.9184714088310738`*^9, 3.9184714353641434`*^9}, {
  3.919488839409777*^9, 3.9194888408286877`*^9}, {3.9194889245795956`*^9, 
  3.919488925522259*^9}},ExpressionUUID->"bd2a2a36-b07a-0945-9a81-\
5dd640ea9468"],

Cell["\<\
NON ELABORARE I CODICI ALTRIMENTI SI CANCELLERANNO LE IMMAGINI!\
\>", "Text",
 CellChangeTimes->{{3.9194889506172023`*^9, 3.9194891147334547`*^9}, 
   3.9194903984409924`*^9},ExpressionUUID->"0f9fd789-255d-4098-adab-\
7e0478d3caa8"],

Cell[CellGroupData[{

Cell["PREPARING DATA", "Subsection",
 CellChangeTimes->{
  3.918535926479454*^9, {3.9185360988998184`*^9, 
   3.9185361008108807`*^9}},ExpressionUUID->"21e51e4d-9ea6-4048-b396-\
ab12997903a0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"CreateLabeledData", "[", 
    RowBox[{"folder_", ",", "label_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "files", "}"}], ",", 
     RowBox[{
      RowBox[{"files", "=", 
       RowBox[{"FileNames", "[", 
        RowBox[{"\"\<*.jpg\>\"", ",", 
         RowBox[{"{", "folder", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<Image\>\"", "->", 
            RowBox[{"Import", "[", "#", "]"}]}], ",", 
           RowBox[{"\"\<Label\>\"", "->", "label"}]}], "|>"}], "&"}], ",", 
        "files"}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.918481791258557*^9, 3.918481795404821*^9}, {
   3.9184818283981705`*^9, 3.9184818846005726`*^9}, {3.9184819641052704`*^9, 
   3.918481973202362*^9}, {3.918482198123655*^9, 3.918482239632799*^9}, {
   3.918482954668127*^9, 3.918482957070217*^9}, {3.9184832809921417`*^9, 
   3.918483281718218*^9}, 3.918526648028658*^9, {3.918535918809908*^9, 
   3.918535935748203*^9}, {3.918536103461214*^9, 3.9185361061193657`*^9}, 
   3.918536175631359*^9, {3.918536208894434*^9, 3.918536214605814*^9}, {
   3.918537206560406*^9, 3.918537207358065*^9}, {3.918537266997881*^9, 
   3.9185372724064336`*^9}, 3.9185375455351152`*^9, {3.918539692803087*^9, 
   3.918539701455439*^9}, {3.9185397830597744`*^9, 3.9185398076181583`*^9}, 
   3.9187063185096226`*^9, 3.918723705907648*^9, {3.9190734930159273`*^9, 
   3.9190735028088007`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"33309a6d-fad9-3f44-9294-a0b7727e75c5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "trainNormal", "=", 
   "\"\<C:\\\\Users\\\\raffy\\\\Documents\\\\university\\\\LM\\\\1_anno_1_sem\
\\\\modellistica\\\\dataset_polmonite\\\\train\\\\Normali_f\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
  "trainPneumonia", "=", 
   "\"\<C:\\\\Users\\\\raffy\\\\Documents\\\\university\\\\LM\\\\1_anno_1_sem\
\\\\modellistica\\\\dataset_polmonite\\\\train\\\\Polmonite_f\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "validNormal", "=", 
   "\"\<C:\\\\Users\\\\raffy\\\\Documents\\\\university\\\\LM\\\\1_anno_1_sem\
\\\\modellistica\\\\dataset_polmonite\\\\Validation\\\\Normali_f\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
   "validPneumonia", "=", 
    "\"\<C:\\\\Users\\\\raffy\\\\Documents\\\\university\\\\LM\\\\1_anno_1_\
sem\\\\modellistica\\\\dataset_polmonite\\\\Validation\\\\Polmonite_f\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sickTrainData", "=", 
   RowBox[{"CreateLabeledData", "[", 
    RowBox[{"trainPneumonia", ",", "\"\<Sick\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"healthyTrainData", "=", 
   RowBox[{"CreateLabeledData", "[", 
    RowBox[{"trainNormal", ",", "\"\<Healthy\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"trainDataTemp", "=", 
    RowBox[{"Join", "[", 
     RowBox[{"sickTrainData", ",", "healthyTrainData"}], "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sickValidationData", "=", 
   RowBox[{"CreateLabeledData", "[", 
    RowBox[{"validPneumonia", ",", "\"\<Sick\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"healthyValidationData", "=", 
   RowBox[{"CreateLabeledData", "[", 
    RowBox[{"validNormal", ",", "\"\<Healthy\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"validationDataTemp", "=", 
    RowBox[{"Join", "[", 
     RowBox[{"sickValidationData", ",", "healthyValidationData"}], "]"}]}], 
   ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "Convert", " ", "training", " ", "and", " ", "validation", " ", "data", 
    " ", "to", " ", "the", " ", "correct", " ", "format"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"trainData", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Input\>\"", "->", 
         RowBox[{"#", "[", "\"\<Image\>\"", "]"}]}], ",", 
        RowBox[{"\"\<Output\>\"", "->", 
         RowBox[{"#", "[", "\"\<Label\>\"", "]"}]}]}], "|>"}], "&"}], ",", 
     "trainDataTemp"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"validationData", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Input\>\"", "->", 
         RowBox[{"#", "[", "\"\<Image\>\"", "]"}]}], ",", 
        RowBox[{"\"\<Output\>\"", "->", 
         RowBox[{"#", "[", "\"\<Label\>\"", "]"}]}]}], "|>"}], "&"}], ",", 
     "validationDataTemp"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.918481791258557*^9, 3.918481795404821*^9}, {
   3.9184818283981705`*^9, 3.9184818846005726`*^9}, {3.9184819641052704`*^9, 
   3.918481973202362*^9}, {3.918482198123655*^9, 3.918482239632799*^9}, {
   3.918482954668127*^9, 3.918482957070217*^9}, {3.9184832809921417`*^9, 
   3.918483281718218*^9}, 3.918526648028658*^9, {3.918535918809908*^9, 
   3.918535935748203*^9}, {3.918536103461214*^9, 3.9185361061193657`*^9}, 
   3.918536175631359*^9, {3.918536208894434*^9, 3.918536214605814*^9}, {
   3.918537206560406*^9, 3.918537207358065*^9}, {3.918537266997881*^9, 
   3.9185372724064336`*^9}, 3.9185375455351152`*^9, {3.918539692803087*^9, 
   3.918539701455439*^9}, {3.9185397830597744`*^9, 3.9185398076181583`*^9}, 
   3.9187063185096226`*^9, 3.918723705907648*^9, {3.9190734930159273`*^9, 
   3.9190735028088007`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"509163ab-f623-4192-9e9b-430b6760f736"]
}, Open  ]],

Cell[CellGroupData[{

Cell["TRAIN AND SAVE THE MODEL", "Subsection",
 CellChangeTimes->{{3.9185360513734035`*^9, 3.918536060934002*^9}, {
  3.918536262129225*^9, 
  3.9185362712654686`*^9}},ExpressionUUID->"7c64256d-5151-e94e-a61d-\
0568f2fe6614"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Load", " ", "the", " ", "pre"}], "-", 
    RowBox[{"trained", " ", "VGG16", " ", "model"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"vgg16", "=", 
     RowBox[{
     "NetModel", "[", "\"\<VGG-16 Trained on ImageNet Competition Data\>\"", 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Define", " ", "new", " ", "output", " ", "layer", " ", "for", " ", 
     "binary", " ", "classification", " ", "directly"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"modifiedVGG16", "=", 
     RowBox[{"NetReplacePart", "[", 
      RowBox[{"vgg16", ",", 
       RowBox[{"{", 
        RowBox[{"(*", 
         RowBox[{
         "Replace", " ", "the", " ", "last", " ", "fully", " ", "connected", 
          " ", "layer", " ", "to", " ", "have", " ", "an", " ", "output", " ",
           "dimension", " ", "of", " ", "2", " ", "for", " ", "binary", " ", 
          "classification"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<fc8\>\"", "->", 
          RowBox[{"LinearLayer", "[", "2", "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "Ensure", " ", "the", " ", "output", " ", "uses", " ", "a", " ", 
           "softmax", " ", "layer", " ", "for", " ", "binary", " ", 
           "classification", " ", "probabilities"}], "*)"}], 
         RowBox[{"\"\<prob\>\"", "->", 
          RowBox[{"SoftmaxLayer", "[", "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "Specify", " ", "the", " ", "output", " ", "decoder", " ", "for", 
           " ", "binary", " ", "classification"}], "*)"}], 
         RowBox[{"\"\<Output\>\"", "->", 
          RowBox[{"NetDecoder", "[", 
           RowBox[{"{", 
            RowBox[{"\"\<Class\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"\"\<Sick\>\"", ",", "\"\<Healthy\>\""}], "}"}]}], 
            "}"}], "]"}]}]}], "}"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"modifiedVGG16", "=", 
     RowBox[{"NetReplacePart", "[", 
      RowBox[{"modifiedVGG16", ",", 
       RowBox[{"\"\<Input\>\"", "->", 
        RowBox[{"NetEncoder", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<Image\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"224", ",", "224"}], "}"}], ",", 
           RowBox[{"\"\<ColorSpace\>\"", "->", "\"\<RGB\>\""}]}], "}"}], 
         "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "NetEncoder", " ", "formatta", " ", "le", " ", "immagini", " ", "nel", 
      " ", "formato", " ", "di", " ", "input", " ", "per", " ", "la", " ", 
      "VGG", " ", "ovvero", " ", "immagini", " ", "RGB", " ", "224", "*", 
      "224"}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9184822792689047`*^9, 3.918482303550764*^9}, 
   3.918482347564904*^9, {3.9184824278814983`*^9, 3.918482439388784*^9}, {
   3.918482542356144*^9, 3.918482547873484*^9}, {3.918482610998975*^9, 
   3.918482626291996*^9}, {3.918482712247818*^9, 3.918482728137915*^9}, 
   3.9184833133927517`*^9, {3.918537577635556*^9, 3.918537579995259*^9}, {
   3.918537615220276*^9, 3.918537665413231*^9}, {3.9185397142107544`*^9, 
   3.918539727211905*^9}, 3.918539839093969*^9, {3.919488865661917*^9, 
   3.919488896746481*^9}},ExpressionUUID->"d684335c-8038-fa41-a899-\
d4e0d36ebb08"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Training", " ", "options"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"options", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MaxTrainingRounds", "->", "50"}], ",", 
       RowBox[{"ValidationSet", "->", "validationData"}], ",", 
       RowBox[{"BatchSize", "->", "64"}], ",", 
       RowBox[{"TargetDevice", "->", "\"\<CPU\>\""}], ",", 
       RowBox[{"LearningRate", "->", "0.0001"}]}], " ", "}"}]}], ";"}], "\n", 
   RowBox[{"(*", 
    RowBox[{"Train", " ", "the", " ", "model"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"trainedModel", "=", 
    RowBox[{"NetTrain", "[", 
     RowBox[{"modifiedVGG16", ",", "trainData", ",", 
      RowBox[{"Sequence", "@@", "options"}]}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.918582449260774*^9, 3.918582450254881*^9}, {
  3.9187069795971375`*^9, 3.918706980954725*^9}, {3.918707608671814*^9, 
  3.918707629427278*^9}, {3.918707665017502*^9, 3.9187076661564636`*^9}, {
  3.918723810736511*^9, 3.918723826681288*^9}, {3.9187336390634184`*^9, 
  3.9187336395272465`*^9}, {3.9187352809166775`*^9, 
  3.9187352827431564`*^9}},ExpressionUUID->"d392e259-07c9-ef4b-9d86-\
4724b2384ae7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"save", " ", "the", " ", "net"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Export", "[", 
    RowBox[{
    "\"\<C:\\\\Users\\\\raffy\\\\Documents\\\\university\\\\LM\\\\1_anno_1_\
sem\\\\modellistica\\\\Mynet\\\\trainedModel4.wlnet\>\"", ",", 
     "trainedModel"}], "]"}], ";"}]}]], "Input",
 CellChangeTimes->{{3.918534189937413*^9, 3.918534192226013*^9}, {
   3.9185342393284035`*^9, 3.918534292881068*^9}, 3.918535315532175*^9, {
   3.918537655161328*^9, 3.918537659862574*^9}, 3.918539164518989*^9, {
   3.918539312962427*^9, 3.9185393266342907`*^9}, {3.918563837546379*^9, 
   3.918563837593916*^9}, {3.9187070297633266`*^9, 
   3.9187070304249344`*^9}},ExpressionUUID->"2d8b797e-c2ed-fb40-be8f-\
f986cbaa1907"]
}, Open  ]],

Cell[CellGroupData[{

Cell["TESTING", "Subsection",
 CellChangeTimes->{{3.918534426133711*^9, 3.918534433463482*^9}, {
  3.9185353112991543`*^9, 
  3.918535313704363*^9}},ExpressionUUID->"c7315e30-5929-ad49-9918-\
a27fdb0952e1"],

Cell[CellGroupData[{

Cell["Preparing testing data", "Subsubsection",
 CellChangeTimes->{{3.918535338976717*^9, 3.918535348926319*^9}, {
  3.918535828900479*^9, 
  3.918535832869433*^9}},ExpressionUUID->"4413ea90-f7da-2b4c-b8bf-\
ec05189511be"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "testNormal", "=", 
   "\"\<C:\\\\Users\\\\raffy\\\\Documents\\\\university\\\\LM\\\\1_anno_1_sem\
\\\\modellistica\\\\dataset_polmonite\\\\test\\\\NORMAL_F\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "testPneumonia", "=", 
   "\"\<C:\\\\Users\\\\raffy\\\\Documents\\\\university\\\\LM\\\\1_anno_1_sem\
\\\\modellistica\\\\dataset_polmonite\\\\test\\\\PNEUMONIA_F\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sickTestData", "=", 
   RowBox[{"CreateLabeledData", "[", 
    RowBox[{"testPneumonia", ",", "\"\<Sick\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"healthyTestData", "=", 
   RowBox[{"CreateLabeledData", "[", 
    RowBox[{"testNormal", ",", "\"\<Healthy\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"testData", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"sickTestData", ",", "healthyTestData"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.918535093540991*^9, 3.9185351788685875`*^9}, {
  3.9185354381894264`*^9, 3.918535464163654*^9}, {3.9185355459071693`*^9, 
  3.918535553496313*^9}, {3.918535740317793*^9, 3.918535822799698*^9}, {
  3.9185358595037117`*^9, 3.918535877745415*^9}, {3.918535998488634*^9, 
  3.918536012958849*^9}, {3.918536234859514*^9, 3.918536246200531*^9}, {
  3.918536415748087*^9, 3.9185364199159203`*^9}, {3.9185366166352234`*^9, 
  3.9185366520377254`*^9}, {3.918536707140017*^9, 3.918536737373318*^9}, {
  3.9185368839993*^9, 3.918536891755297*^9}, {3.9185377292109356`*^9, 
  3.91853773826228*^9}, {3.9185398736560745`*^9, 3.918539880623471*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"6e52c61f-6939-1148-9214-308d703a4376"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Using my net to generate predictions", "Subsubsection",
 CellChangeTimes->{{3.918537743916443*^9, 
  3.918537762591831*^9}},ExpressionUUID->"81d4aaeb-848c-9c47-9c61-\
782991cb0489"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Generate", " ", "predictions"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"mynet", "=", 
   RowBox[{
   "Import", "[", 
    "\"\<C:\\\\Users\\\\raffy\\\\Documents\\\\university\\\\LM\\\\1_anno_1_\
sem\\\\modellistica\\\\Mynet\\\\trainedModel3.wlnet\>\"", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.918536322686479*^9, 3.91853632497129*^9}, 
   3.918536519975813*^9, 3.9185366545267715`*^9, 3.9185377666597614`*^9, {
   3.918539177099957*^9, 3.918539213035801*^9}, 3.9185631936329536`*^9, {
   3.918563846689707*^9, 3.9185638470482407`*^9}, {3.9186711160460434`*^9, 
   3.9186711184193497`*^9}, {3.9186712394482193`*^9, 3.918671246453081*^9}, {
   3.9187341368450737`*^9, 3.918734144439972*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"d71900d6-a930-eb4b-b6ba-9b3426dafd93"],

Cell[BoxData[
 TemplateBox[{
  "Import", "nnincmpb", 
   "\"Attempting to \\!\\(\\*RowBox[{\\\"\\\\\\\"import\\\\\\\"\\\"}]\\) a \
network that was produced using version \\!\\(\\*RowBox[{\\\"\\\\\\\"14.0.2\\\
\\\\\"\\\"}]\\) of the Neural Networks paclet in version \
\\!\\(\\*RowBox[{\\\"\\\\\\\"13.3.0\\\\\\\"\\\"}]\\). This can cause some \
issues.\"", 2, 14, 1, 32171693559537368084, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9187341519531183`*^9, 3.91907348473775*^9, 
  3.919162021626192*^9, 3.9191710710753374`*^9, 3.9191752293769712`*^9, 
  3.919400004472096*^9, 3.919490190822687*^9},
 CellLabel->
  "During evaluation of \
In[14]:=",ExpressionUUID->"787ba0ac-f046-4d73-ab91-88ea437edfa3"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "conv1_1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 3, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "ChannelGroups" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {224, 224}, 
                    "$OutputSize" -> {224, 224}, "$WeightsInputChannels" -> 
                    3|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]|>|>, 
                    "relu1_1" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv1_2" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "ChannelGroups" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {224, 224}, 
                    "$OutputSize" -> {224, 224}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]|>|>, 
                    "relu1_2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]|>|>, 
                    "pool1" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$IgnorePadding" -> False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$Channels" -> 64, "$InputSize" -> {224, 224}, 
                    "$OutputSize" -> {112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv2_1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "ChannelGroups" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "relu2_1" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv2_2" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "ChannelGroups" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "relu2_2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "pool2" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$IgnorePadding" -> False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$Channels" -> 128, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {56, 56}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv3_1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{256, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "ChannelGroups" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "relu3_1" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv3_2" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "ChannelGroups" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    256|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "relu3_2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv3_3" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "ChannelGroups" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    256|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "relu3_3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "pool3" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$IgnorePadding" -> False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$Channels" -> 256, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv4_1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "ChannelGroups" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    256|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "relu4_1" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv4_2" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "ChannelGroups" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    512|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "relu4_2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv4_3" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "ChannelGroups" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    512|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "relu4_3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "pool4" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$IgnorePadding" -> False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$Channels" -> 512, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv5_1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "ChannelGroups" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    512|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "relu5_1" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv5_2" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "ChannelGroups" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    512|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "relu5_2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv5_3" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "ChannelGroups" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    512|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "relu5_3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "pool5" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$IgnorePadding" -> False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$Channels" -> 512, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "flatten_0" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]|>|>,
                     "fc6" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 25088}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{4096}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> 25088, "$InputDimensions" -> {25088}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>|>, 
                    "relu6" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>|>, 
                    "drop6" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>|>, 
                    "fc7" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4096, 4096}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>|>, 
                    "relu7" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>|>, 
                    "drop7" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>|>, 
                    "fc8" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 4096}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{2}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "prob" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "prob", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "prob", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{224, 224}], 
                    "ColorSpace" -> "RGB", "ColorChannels" -> 3, 
                    "Interleaving" -> False, "MeanImage" -> None, 
                    "VarianceImage" -> None, "DataTransposed" -> False, 
                    "Method" -> "Stretch", "Resampling" -> 
                    NeuralNetworks`ValidatedParameter[Automatic], "Padding" -> 
                    GrayLevel[0], "Alignment" -> Center, "$Version" -> 
                    "13.3.0"|>|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {"\"Sick\"", "\"Healthy\""}, "InputDepth" -> 
                    1, "Multilabel" -> False, "Dimensions" -> 2, "$Rank" -> 0,
                     "$Version" -> "13.3.0"|>|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]112\[Times]112\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]112\[Times]112\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]112\[Times]112\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]112\[Times]112\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]112\[Times]112\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]56\[Times]56\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]56\[Times]56\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]56\[Times]56\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]56\[Times]56\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]56\[Times]56\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]56\[Times]56\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]56\[Times]56\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]14\[Times]14\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]14\[Times]14\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]14\[Times]14\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]14\[Times]14\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]14\[Times]14\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]14\[Times]14\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]14\[Times]14\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"flatten_0\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 25088\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4096\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4096\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"drop6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4096\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4096\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4096\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"drop7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4096\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"prob\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.918734152000412*^9, 3.9190734847850933`*^9, 
  3.9191620219093637`*^9, 3.919171071201507*^9, 3.9191752294928145`*^9, 
  3.9194000047080083`*^9, 3.9194901909950943`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"fb84d475-b97d-48fe-843d-dbf76751d1cb"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"predictions", "=", 
   RowBox[{"mynet", "/@", 
    RowBox[{"testData", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "\"\<Image\>\""}], "]"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.918536322686479*^9, 3.91853632497129*^9}, 
   3.918536519975813*^9, 3.9185366545267715`*^9, 3.9185377666597614`*^9, {
   3.918539177099957*^9, 3.918539213035801*^9}, 3.9185631936329536`*^9, {
   3.918563846689707*^9, 3.9185638470482407`*^9}, {3.9186711160460434`*^9, 
   3.9186711184193497`*^9}, {3.9186712394482193`*^9, 3.918671246453081*^9}, {
   3.9187341368450737`*^9, 3.918734144439972*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"d355e352-792f-4081-8208-cc7899a5c19b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Metrics analysis", "Subsubsection",
 CellChangeTimes->{{3.9185377787868557`*^9, 3.9185377987252846`*^9}, {
  3.9191744401809783`*^9, 3.9191744454212503`*^9}, {3.9191745577809634`*^9, 
  3.9191745610669765`*^9}},ExpressionUUID->"741dd5d5-3dec-ea47-b052-\
4c6aa7a0589f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Extract", " ", "the", " ", "true", " ", "labels"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"trueLabels", "=", 
     RowBox[{"testData", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "\"\<Label\>\""}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Calculate", " ", "accuracy", " ", "or", " ", "other", " ", "performance",
      " ", "metrics"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"accuracy", "=", 
     RowBox[{"Mean", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Boole", "[", 
         RowBox[{"#1", "==", "#2"}], "]"}], "&"}], "@@@", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{"trueLabels", ",", "predictions"}], "}"}], "]"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"cm", "=", 
     RowBox[{"ClassifierMeasurements", "[", 
      RowBox[{"predictions", ",", "trueLabels"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"confusionMatrixPlot", "=", 
     RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"\"\<Accuracy: \>\"", ",", 
      RowBox[{"N", "[", "accuracy", "]"}]}], "]"}], ";"}], 
   "\[IndentingNewLine]", "confusionMatrixPlot", "\n", 
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Total patients \>\"", ",", 
     RowBox[{"Length", "[", 
      RowBox[{"testData", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "\"\<Label\>\""}], "]"}], "]"}], "]"}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.918536496675567*^9, 3.9185364983152943`*^9}, 
   3.918536544604719*^9, 3.9185367002535*^9, 3.918536876319704*^9, {
   3.9185370837111015`*^9, 3.918537094272999*^9}, {3.9185376924811306`*^9, 
   3.918537720665823*^9}, {3.919170826573848*^9, 3.919170830656952*^9}, {
   3.919171062573925*^9, 3.919171080681857*^9}, {3.919171335259923*^9, 
   3.9191713996643066`*^9}, {3.919171459235121*^9, 3.919171466202714*^9}, {
   3.91917211263849*^9, 3.9191721350328045`*^9}, {3.919172457173164*^9, 
   3.91917253279904*^9}, {3.9191726037583365`*^9, 3.9191726056802*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"653e4cc3-76bf-df47-a6c8-41a0904dacd9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Accuracy: \"\>", "\[InvisibleSpace]", "0.7644230769230769`"}],
  SequenceForm["Accuracy: ", 0.7644230769230769],
  Editable->False]], "Print",
 CellChangeTimes->{{3.9185371141995277`*^9, 3.918537129776069*^9}, {
   3.918537712160185*^9, 3.9185377225770087`*^9}, 3.918539425039327*^9, 
   3.918563323654409*^9, 3.9186076629577236`*^9, 3.918734386091682*^9, 
   3.919171189694174*^9, {3.9191713385054274`*^9, 3.9191714021501207`*^9}, 
   3.9191714667771673`*^9, {3.919172115114393*^9, 3.9191721378829365`*^9}, {
   3.9191725133813596`*^9, 3.919172534522934*^9}, 3.9191726078595934`*^9, 
   3.919175056378316*^9, 3.919175349748458*^9, 3.9194903703262978`*^9},
 CellLabel->
  "During evaluation of \
In[63]:=",ExpressionUUID->"f44164a6-051a-4241-9fc0-0fe2d358493a"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.9406434040598167, 0.8941510708764018, 0.7320626121469114}, {
   1., 0.42, 0.}}, {{0.9085167072567776, 0.7699379714148522, 
   0.422113349306622}, {0.8767827220303482, 0.6311612771692577, 
   0.1492001843666872}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["88", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "88", "\" examples of \"", "\"Healthy\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9887640449438202`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.37606837606837606`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.544891640866873`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{88, " examples of ", "Healthy", " correctly classified"}], 
         Row[{"Precision = ", 0.9887640449438202}], 
         Row[{"Recall = ", 0.37606837606837606`}], 
         Row[{"FScore = ", 0.544891640866873}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"Sick\"", "\" misclassified as \"", 
             "\"Healthy\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.011235955056179775`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.002564102564102564`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "Sick", " misclassified as ", "Healthy"}], 
         Row[{"Column fraction = ", 0.011235955056179775`}], 
         Row[{"Row fraction = ", 0.002564102564102564}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["146", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "146", "\" examples of \"", "\"Healthy\"", 
             "\" misclassified as \"", "\"Sick\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.27289719626168224`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.6239316239316239`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{146, " examples of ", "Healthy", " misclassified as ", "Sick"}], 
         Row[{"Column fraction = ", 0.27289719626168224`}], 
         Row[{"Row fraction = ", 0.6239316239316239}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["389", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "389", "\" examples of \"", "\"Sick\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7271028037383177`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9974358974358974`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.841081081081081`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{389, " examples of ", "Sick", " correctly classified"}], 
         Row[{"Precision = ", 0.7271028037383177}], 
         Row[{"Recall = ", 0.9974358974358974}], 
         Row[{"FScore = ", 0.841081081081081}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "234", "\" example\"", "\"s\"", "\" of class \"", "\"Healthy\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.37606837606837606`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{234, " example", "s", " of class ", "Healthy"}], 
        Row[{"Recall = ", 0.37606837606837606`}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "390", "\" example\"", "\"s\"", "\" of class \"", "\"Sick\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9974358974358974`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{390, " example", "s", " of class ", "Sick"}], 
        Row[{"Recall = ", 0.9974358974358974}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "89", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Healthy\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9887640449438202`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{89, " example", "s", " classified as ", "Healthy"}], 
        Row[{"Precision = ", 0.9887640449438202}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "535", "\" example\"", "\"s\"", "\" classified as \"", "\"Sick\""},
            "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7271028037383177`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{535, " example", "s", " classified as ", "Sick"}], 
        Row[{"Precision = ", 0.7271028037383177}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Healthy\"", BoxRotation -> 0.], TraditionalForm]}, {
      0.5, 
       FormBox[
        RotationBox["\"Sick\"", BoxRotation -> 0.], TraditionalForm]}}, {{1.5, 
       FormBox["234", TraditionalForm]}, {0.5, 
       FormBox["390", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["89", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["535", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Healthy\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Sick\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->13,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->181.2,
  Method->{
   "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02], 
    "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.9185371142396774`*^9, 3.9185371297960663`*^9}, {
   3.918537712170158*^9, 3.918537722586979*^9}, 3.9185394250594463`*^9, 
   3.918563323669948*^9, 3.9186076629677544`*^9, 3.9187343861073*^9, 
   3.9191711897161584`*^9, {3.919171338521405*^9, 3.919171402182104*^9}, 
   3.9191714667921743`*^9, {3.9191721151452036`*^9, 3.919172137898562*^9}, {
   3.919172513397088*^9, 3.91917253453856*^9}, 3.919172607875228*^9, 
   3.919175056378316*^9, 3.9191753497796545`*^9, 3.9194903703419333`*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"a94e8838-4734-4333-b876-390410d4b22e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Total patients \"\>", "\[InvisibleSpace]", "624"}],
  SequenceForm["Total patients ", 624],
  Editable->False]], "Print",
 CellChangeTimes->{{3.9185371141995277`*^9, 3.918537129776069*^9}, {
   3.918537712160185*^9, 3.9185377225770087`*^9}, 3.918539425039327*^9, 
   3.918563323654409*^9, 3.9186076629577236`*^9, 3.918734386091682*^9, 
   3.919171189694174*^9, {3.9191713385054274`*^9, 3.9191714021501207`*^9}, 
   3.9191714667771673`*^9, {3.919172115114393*^9, 3.9191721378829365`*^9}, {
   3.9191725133813596`*^9, 3.919172534522934*^9}, 3.9191726078595934`*^9, 
   3.919175056378316*^9, 3.919175349748458*^9, 3.9194903703576546`*^9},
 CellLabel->
  "During evaluation of \
In[63]:=",ExpressionUUID->"da2168c5-f493-44a0-bc3f-faf0758cba49"]
}, Open  ]],

Cell[TextData[{
 "In ambito medico l\[CloseCurlyQuote]accuratezza non \[EGrave] una metrica \
indicativa della performance del modello; Per esempio assumiamo di voler \
realizzare un sistema di intelligena artificiale in grado di rilevare tumore \
al cervello in un campione di 100 pazienti. Assumiamo di avere nel nostro \
dataset 100 pazienti di cui 99 sani e 1 malato, sostanzialemente poich\
\[EGrave] l\[CloseCurlyQuote]incidenza di tale malattia \[EGrave] bassa e \
questa potrebbe essere una situation reale. In questo caso un modello di \
intelligenza artificiale che restitutisce come risposta sano avr\[AGrave] un\
\[CloseCurlyQuote]accuratezza del 99%, ma di fatto codesta rete risulta \
completamente inefficace nell\[CloseCurlyQuote]identificazione del cancro. In \
questo contesto pi\[UGrave] rilevante \[EGrave] una metrica chiamata \
precision che misura la percentuale di positivi rilevati dall\
\[CloseCurlyQuote]intelligenza artificiale rispetto a tutti i positivi e si \
calcola come:\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
rnL9cZFX7fnzF9XsGzZEDnBMlV2dIhddH3MxITEzhvqcK57c+2nZ91JIcIMU
VeR2uG+9/PKk5ydSH0tdoT19qYOKigqiB+Iny8mOmZlZRkYG7XE0ZMhrJPHj
bFlwcrr8+PFj1l0OIgc4psquTpFLyoyR9wsdxCFTgEbdRyKrMDktL4EMLTox
LCTSnySSF5KQHp2ay9OofrIe39ueSv7mCEjSyP8LEIT29KUmnj9/7uLiYmgo
4TNW6ZB3D0tLy6SkJNojaMhUVVWlpaUpcxqDtbU168dLIXKAY6rsar39yIM0
cwtFbgJWG9vzNtQnXEGy76UkZ8f5BXk5Xrog8r5HbPP8BTtP35uJmbFZ0Ln6
SGCYj5K/OQL439hFeyx1hfb0pT7Ky8s9Pb3Mzc1lPzRnbGx8/vz5/Px82n1v
4BQWFpqamorXn7xSZDkRaeJpNjY2VlZWFhYW4pcSC3BwcHj58iXtoSgORA5w
TJVdzfeRu3HrmuJzcA0+ARpxN7DMgqSgCD9LK0vpvTU1M/UJ9NDwu14wESXv
PSIA58hpDlXV1enp6ZcuXTIzM5Ny/Ofs2bMmJiZEGwJv337x4gXtXjdwiH0R
T5PwPmZqSl6p6OiY+/fvv3r16vXr18+ePcvLy7sdFGRrayvxAhZPT8/Kykra
A1IQiBzgmCq7mkUuISNasS9aFWBiapKaS//eI+n5ibe8r+vJ/Cmx85VLKTkM
fEWUJiftToKBgeInVgnQnMO5EkN7+qIAmesTExNv3LhB/MHCwoJInQn5Iyf/
mZqam5tbWlo6OjqGhIQ8efKEdk8bPtXV1UFBEm4sQF6FmJjYuqzs+fPnXl7e
5CUTeRYx8IKCAjUPob6AyAGOqbKrWeRI3NxdFTtTTl9f38vPnfpsm3U3+er1
K/J2/sLF8zgup2RIDRX4tamNt2Yczq0rtKcvmpSUlGRnZyclJUVGRoWEhsbF
xaWlpT148IDxs+ZZ4tmzZ+IflRKLu3PnjvQnktcoIiLSyEj0uS4uVxi9uRxE
DnBMlV39Ikd8xva8teyHswQQ93NwtM8uTKE71eY+SPMJvKWYRVy97pJ9j3L/
mc7tcD9lrnY0NjZKzoqlPgopoT19gUZNeHi4yJ+MkZGRjN+HS1zO19dP/P/Q
Gb3qASIHOKbKrn6RI0lIj7K0PndWX1aZI9O3ja1Vak489ak2KTNGmW8ZC4u9
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
P35cX9+ApOYryG1IbG1tnWtwcXHx9PQMCAiIiYlJTExMSUlJT0/Pzs7Oy8sr
KCi4d+/ew4cPnzx5Ulxc/OrVq/LycvgeAIoBkQMcU2WHyCGI9GT9ZWtxqeGR
CcHE0wLDvb2D3G/6utpftj5rfObbI/u3796yZv2KhYvnTf1i8pjPRg758P2e
vXu0aaPdRKvJeypAS0urY8eO/fr1++STTyZPnjx//vzVq1fv3Lnz0KFD//jH
P2q+/tI7NjY2OTk5MzOTmF5hYeGjR4+Ejkd7ngRAo4HIAY6pskPkEESYmoNs
SUnZsbEpYWFxgQHhXh7+bg7OtvomZw4d/Xrz9vXzF835bPyYgYMGaLfRVoWh
1S/t27f/8MMPdXV1V61a9fXXX+vp6Tk4OPj6+sbzeGlpaUTw7t279/Tp05KS
Ehy+A0AIRA5wTJUdIoc02hBtS7vD46VHRiUGB0f7+YZ4uPtetbtkdfz0d+u3
rJkybVL/gX21tLQUMKgmTZo0a960ZasW2m1bte2g3aFzu85dO5DodO+k04Of
br27dO+tQ9KzX9ee/bqR9B7YY1CP7v27dRWkj04Xfrp06dm5E0mPTp26dehA
0qUdaY+02qp1i+bNmzYlO1Kse3379p02bdqGDRtOnTp1+fLlqKio1NTU3Nxc
onZFRUVQO9CYgcgBjqmyQ+SQxhNibun5CcTcIni3A8K9bvi4Glno7T2wa9Gy
+SPHjOii01lGEdLSatKiVfM27Vp37NKOWFmPvl37DOzR7/1eA4f2GTys35BP
Bg4bPXjcjBEzlk1YsnXWhm8W7z619jvTHSSn7Pb/6HCAxPjaMdMb35PY+f14
PvAnEudoE56pQejZMyTBP53yOPEdifv3h5y+3UfieGDPuZ1bSP6xbvWhJQu3
z/pi5aTxMz/9eOz7gz4dOGB4/34f9u3zQe+eRAX7ddXp2alTl/bt2rdu3ap5
cy2ZTa979+4TJ05cv379iRMniNrFxsZmZGTcvXuXeF1paSm8DjQeIHKAY6rs
EDmkYScjPzEhIyoyISgwwvuW/zUzG6M9X++cNeeL/gP7vvvIlVaTVtotO3Ru
16V7ja0N6jFgSJ8PPh7wybghXywet3r3/H3/2HD6wgFr71NXYky9Mu2C7zvH
l9zM+NU/858BCuQ/t70VyJ+BXpW3rhVduZh3wSrB3DDgxx8ufbNHf9O6fQvm
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
tXJldGjAmOHolyrnT7vMYz6VR77cvcjLPIbiy6kcl86BYz/6Qxpq1IHUlklj
R60+VUQJhjojw0S/TmPlByF+VafRhro8fWXRRmXP8AOpX1y//Zoqp8ePH8dt
W2YMEDkIglZpt22RE/q6U5Vnj98ai1mcgfqxOeib/Cc6bj8zSuRCs13RkqWc
CcfvRmqsjDa+NXQheteQa3/kln/0nJ5drqy5/GS58gf+NPSWMHkLtdDr6Da0
ZAnn89S7URrbOXYn4lvW+JcXN7eTS6ZsHIj+eeyO5u4ZeOAmTD+yJWQRWugW
v1ZjuVv8GrR8a+gi07Jn+IGYhplErjZKeCy0vnT2JP0b8RjwAVpSHhWsf2vn
mHvQaqETR1ZIQjTe+jdBkfDtXPRu5voVBh5F1PTxSDhrLv9TJY2cPha9lbNt
LbUwb/t6tASJTUV0qMZ2kO8Fj/+46uLmjg1GHUhtmTRh+pGEb+ehhRnrNK94
Zqz9GS1H75qWPcMPpH7xX/0zVU5lcjlu2zJjgMhBELRKu22L3G+MHVTlEap2
m6n/Gi4YGu+qfhcZ+1ntt9b4zEVLAjJ+07l+wiVf9O53bpMM3OGwHIb2W6E5
DPTWT/xp1JKfPaejJf4Ze3RuyjdtF3r3Z8EM8p8L9n5WtXL6npRb4Xl/xL1x
H0zIpMZC6SmP8atdFjHG5v7x+lQner3QdQxajt41LXuGH4hp1LHP6jGNSmlY
qQ+/6t54zm/Ujfpn9v+K1hcO661/I36fDUVLTu/d9jgy6J94eW2/XT5vWtVq
+7brfPe2vwC9Gzb5MwOP4nfWb9pvnWPteel446glkhnjq37pb7p/adGeLehd
tI5RB1JbJk0QuRI+m+3SOWjsR//UGEqMXgeO/Qgtv8JnmZY9ww+kfonb/fop
Od7e3rhty4wBIgdB0Crtti1yqzesoCpPRIZHvXdeY51E490T5bonKDZK5L7Y
8RFaIji8NSyHqUFoNjMwYy96d/qWQQbucOo9zTNsiNS7UeitWduGUkvQ65fn
piJ0birldnjV+tuHkf90U6+ZtK4f+ueuyGW+qbuii9zjL/mk3ZMUGnbgJohc
bmXsvN0jx69yUV98/SwP9UVvtOTLPSNrXsg2KnuGH4hp1LHP6nSJF0mqm94e
x1YuC5/8GXK2qilKXj70gcKtTxf9G0lf9xO3X3f02UPLvy7cvRnZ4G0/QaXW
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
9t2S5ZuCv0Gf2hG51C1+TWQBJ/XVo7L0QxlR3AUxN2Ed+qWbAr9GWwvK2ot2
RudHCp8lKIo90crbwxej34h+otfoqDVOfB2/Gxmaw2DHrd4WtnhD4IItoYsY
yhVhuUyNB5PpOTqTM5l6N4pcAaH9EApjs2f4gZhGHZts7FczENrL/46LKXbd
eeTHb9XfzIpfNCf5+4X5OzeURQTo/Ij2kgpJyO+sPelrf0ha/GXsgpkJi744
/suy85y9f9dyt9jDUN+8Xzckf/+NeuHsuK9nHlz6Vca6ny9y9/9h2ERnlBHd
8vHMXP9z4uJ5aLfR1s7s31HzwfE1eZGkuiZyQysnLfkS/Ub0E72+LuJqPNrV
8AOpLZNom2lrvk/49ovYBTM01qntI9W/OjqUXAGhc4o8o7Jn7H+ReuT9du+S
FfX999/HbVtmDBA5CIJWabdtkeveoxtZdtp2blnvnmZj6D+1BVgAc3dhWmDg
aAsAC73av0dW1C5duuC2LTMGiBwEQau027bIdejYniw7nT9oh71NWzkgctjB
3qatARA5a6Zv545kRW3fvgNu2zJjgMhBELRKu22LXOs2rciy06NPZ+xt2soB
kcMO9jZtDYDIWTMDu3UhK+q777bFbVtmDBA5CIJWabdtkWvZqjlZdj4c0A17
m7ZyQOSwg71NWwMgctbM4O7VN6u0bt0at22ZMUDkIAhapd22Re7dtm2qz8j1
hjNyb2CD/wIE9t2wZ7C3aWugahzBglpHDQB4Gdi1+oxc27ZwRs5yQSOjsKWg
UdptW+Q6du5Alp1OPeAeOcDawd6mAUA/fV5V1A4d4B45ywWNjMKWgkZpt22R
6/FB9+o7Ojq0wN6mAUA/2Ns0AOiHGrXatWtX3LZlxgCRgyBolXbbFjmXPr3I
svNOKwzzyAGAUWBv0wCgnx6vblaBeeQsGTQyClsKGqXdtkVuwOD+uJ7sAADG
gr1NA4B+OrVsQVZUZ2dn3LZlxgCRgyBolXbbFrnhI4aSZcexgQP2Ng0A+sHe
pgFAPy0bNyYr6qBBg3DblhkDRA6CoFXabVvkRo35hCw7Dg7/w96mAUA/2Ns0
AOinoaMjWVFHjRqF27bMGCByEASt0m7bIjd+0pj/vYr8J2rsnRoA9IC9TQOA
Hp4nqRxeldPJkyfjti0zBogcBEGrtNu2yE2dOYkSuZOPFdg7NQDoAXunBgA9
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
VQ2NDaA+HrZoT1/KS/hAcBIcBS4+PkFgJWHh4U0xWmhqCHLAcKrttIJcYlq0
sYngl7xEYedowy+meWZzpagyfsHVrIJrCvu5RH0TLXZ33NAPNQpLs6mPhy3a
05fy8vER/J5CbGysuCtxdXUTWElSUnJTjBaaGoIcMJxqO5UgR0KCjZ2VBCmO
FRDsQ33OVcjKKkyJS44MCvfzC/Ly8nPz8nP3v+AdEhmUkBbNv5xOfXgyrG9m
fc0GuZ17t1AfTE3Rnr6Ul/D3FKysrcU6CtzNmzf19PRqr4HH4127dq3pxgxN
B0EOGE61nUqQi04I42nyzkvK0NCARA7q064iVXZRalj0BWc3R3MLM20d7dqT
kZ6+nqW1uZuXS3RiWF5JBvWhSl8Z+UldunYmKU5FRcU/xIP6eGqK9vSlvG7f
vq2pqSkQw5KTUyorRbp5RUVFYGCgwMuUqakpubyJBw5NAkEOGE61nUqQs7W3
ljjFsUIiAqhPuwpTSZmxrh5OBgb6Dffc1MzYy889I4/ymeWlL2snM3Z3XL8B
7+dfyaQ+npqiPX0pr8rKSgcHB4EnvJmZWVFR40f0ffnyZWpqqq6ursDNw8LC
mmHk0BQQ5IDhVNubP8jxL6XV3ucjGRtbK+rTrmJUXFKE6G9za2rynFzsU3MS
qA9bmlq8fAEb5NZ+v5r6YGoX7elLqeXm5grslDtffbpVfm5uA6d4ePLkSXJy
svCJVg0NDW/evNmc4wcZQpADhlNtb/4gl5gWLWWKI0gULLouF8f+4nQlZ8aZ
W4h0+Jf/zG6OttmcfWubfzmtZ6/32CDn4m1PfTy1i/b0pdSeP3/u6uoq/Gy3
tLSMiYm5cuVK7Y/MVVZWnZOrsLAwNDSUZDbhW0VGRlK8LyAlBDlgONX25g9y
4TEXJIluQnIV4vNaFCv3crqtvYRfOfHwdi26zslTp7n5ObIp7r2ePbKL5SuO
0p6+lB1Ja+bm5sLPdm1tbWdn55CQkISEhJSUlOTk5NjY2MDAQFtbOx6vjs/6
koUlOAwdyA8EOWA41fbmD3IhkYKfCpZMdlEq9ZmX0xUc7i9x87W1tRLToqnf
BQlqww9r2CC3YMlc6oMRKNrTl7KrfPUqMzPLwKDeg1uSRGdoaEgWEH4Ttoal
pVVJyRXadwWkgiAHDKfa3vxBLiI2WOL8UFteiRx9TJ1zlVeSYWwsyXH8atg7
2lySjzNbiV4FV7P6D+zHBjkLe2Pq4xEo2tMXvHrx4kVSUpKZmZlkvxR2dna5
uXgcOQ9BDhhOtZ2jn5HT0dGWk/NjcrTikiOkfAi0tLVyuLZTNCDMS0VFhaS4
zl06yeGpe2lPX1CloqIiOzvbzt6+zrdN66Opqenh4VFcXFwp4iFLQI4hyAHD
qbbT+NZquo7U31q1tbemPu1yujx9BI9CL4HIuBDqd0Ss2rV/G7s7bvrMadQH
I1y0py/4HxLGSCQLDw+3sLBs9LeA5D0ra+vo6OiysjLaAwfZQJADhlNtp3Ic
OTsHqY8jFxlIfdrldFnZND5DNcrbX46OpttoFV3P+XD4B2yQ0zXiUR+PcNGe
vuA/Hj9+nJubFxYW5uLiYmxsLLCDTlNT08zM3MPDIyoqKr+g4NmzZ7THCzKD
IAcMp9pOJcjFXAxv4NPCjTIw1M8ukq/vG3KuDI3rOGaCuJxdHajfEdErIj5I
XV2dpLjWrVslZkRRH49w0Z6+oA4kzl29ejUzMzMhIZFkttDQUBLtYmJiEhMT
c3L4ZWVliHCKB0EOGE61nc65Vq9lSXxyB/J3cWAIzrUqbZEwLH2Qc3LhUpA7
dvoQuztu3IQx1AdTZ9GevqARz58/f1ytgUMEgwJAkAOGU22nEuRIJWXEmphK
8q1JByc7/qU06nMu10uC4wAL8/R2pX5HRKziMv6Yz0azQe7UuaPUx1Nn0Z6+
AKAKghwwnGo7rSBHKjIuxNCo3kM21cnaxoLr54eSk3JyFTyzpASCw/2p3xER
Kz4tonWb1iTFqampRV2U0+9o0J6+AKAKghwwnGo7xSBXVJoTERtsbiHSIZt4
mjxHV/uL6THUZ1vFqNCoIClTHI/H41Co1tQ/w+6OG/7xMLk9JwXt6QsAqiDI
AcOptlMMcpeq3/CKT4ly93Zp4CNbJDCYW5r5Bnml516kPtUqTGUXpujoSnUQ
GFMzExLFqd8REWvK11+yQW7fj7uoD6a+oj19AUAVBDlgONV2ukGOrZzi1Mi4
EG9/DzsHGzNzU0MjAz19PWNjI5LfnFzt/S54k7BXcDWL+jgVrNy9nCWPcbzz
YVFB1O+CiJWam9CxU0eS4lRUVC5E+lIfT31Fe/oCgCoIcsBwqu3yEOTYyruS
mZIdH5ccGRkfGh4bHJ0QRvJbet7FQu7s9uFWpedeNJL0ICTWtpZ5JRnU74KI
ZWpjyO6OGzRkQME1+f2LgPb0BQBVEOSA4VTb5SfIoZq/SGDW1dMRN8UZmxhx
68OKcxfOZoPc5m0bqA+mgaI9fQFAFQQ5YDjVdgQ5Za7C0pygMD99Az3RU5yp
mUlUfCj1kYte2UUp3Xu8ywY5z0Bn6uNpoGhPXwBQBUEOGE61HUFOySv/alZo
9AVzS7NGTxGuqalp52ATmxRRXManPmzRy9HDhk1xvfv24l+W6yMQ0p6+AKAK
ghwwnGo7ghyq6HrVd4e9/NzNzE3rPHWato62lbWF/wXvlKx46qMVt1atW84G
uWWrF1MfTMNFe/oCgCoIcsBwqu0Icii2ckvS45IjL4T5uXs5O7rY29pb2znY
OLk6ePq6hUQGJqbFFF7Lpj5IcSvvSmaf9/uwQc7O1ZL6eBou2tMXAFRBkAOG
U21HkEPVruIyfnZRanruxeSsuJSs+Iy8i7mX06mPSuLyDnJjU9y73btmFCRR
H0/DRXv6qsOLFy8ePXp09+7d8vLye/fuPX78+OXLl7QHBdC0EOSA4VTbEeRQ
Clxbdm5ig9zseTOpD6bRoj19/evp06dXrlxJS0sLDw8PCgry9fX19PT08/Mj
/4+MjMzMzCwtLa2oqKA9TIAmgSAHDKfajiCHUtQqLM0epDGQDXLGFnrUx9No
0Z6+qpB4VlRUHBoa6uTkZGxsLPyBSR6PZ2pq5ubmFhERQZbEDjqFR54Sjx49
unPnDrtL9sWLF7RH1OQQ5IDhVNsR5FCKWsFRfiqqKiTFtW3XNiUnjvp4Gi3a
09er8vLyyMhIe3v7Rr/CzH6LmSwZGxv74MED2gMH2bt7925BQWFCQgJJ9YGB
gT4+Pr6+vkFBQWFhYUlJScXFxQ8fPqQ9xqaCIAcMp9qOIIdS1Dp4ZA+7O+6L
ryZQH4woRXfyunLlipeXl5aWlohHFGTp6uqSWb6srIzu4EGG7t+/n5aWRmKb
ra0teXyFH3QDAwOS4QMCAtLTMxQyziHIAcOptiPIoRSyisv4H48awQa58zqn
qY9HlKI4c126dMnZWcJz7/J4PHd395s3b1IcP8jEy5cvc/h8f3//Ot9VF2Zi
YkpifFFRcWUl7aHLFIIcMJxqO4IcSiErOim0ZcuWJMW1aNkiLiWC+nhEKVrT
Vnl5uYODQ32TtZ6enpmZmZWVtampqY5OvSd08/b2VsidM8rj2bNnSUlJlpaW
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
KSQKKtB2gEZVVlby+XxfX198XxUAoD5IFFSg7QCi+/vvv2kPAQBATiFRUIG2
AwAAgPSQKKhA2wEAAEB6SBRUoO0AAAAgPSQKKtB2AAAAkB4SBRVoOwAAAEgP
iYIKtB0AAACkh0RBBdoOAAAA0kOioAJtBwAAAOkhUVCBtgMAAID0kCioQNsB
AABAekgUVKDtAAAAID0kCirQdgAAAJAeEgUVaDsAAABID4mCCrQdAAAApIdE
QQXaDpJZV432KMTWdMPmaEMAAGQFiYIKtF2ZSZM93qkm2/E0g6YbNkcbIi7k
VQCoDxIFFWi7MpMme3A0tyDISUlJ7iYASACJggq0XZlJMym7VpPteJoBgpyU
lORuAoAEkCioQNuVmRJOyghyUlKSuwkAEkCioAJt56K11ch/rly5Ym5uvmPH
zppLWKWlpdbW1rt37163bt2GDRtOnDgRFhb2xx9/CKyBnZTX/peIWxFYuLZG
t04cOXKE3LygoKDONeTnF5BryTISrJn166+/ent779mzh6xn8+bNurq6eXn5
jEQ5RMSNNrBmEddQ09Li4mIDA4MtW7aQH3fu3Onk5PTixQt2mbKyMvJYbN++
nb3K3d2d3FNZbVRfX5/0ivxIbuXp6SmwZlGeM0+fPnVwcGDbTra7f/9+Ozs7
MpKGOwwAigGJggq0nYvYyTQgIGDGjBn9+/dv3bp1TYp4+/YtmUlnzpw5cODA
Nm3aqKioqKqqdunSZfTo0WR2fvbsWe011EmUrTD15BYRt06QlEJufuTI0Trv
4OHDR8i1W7dulWDNBPmR3HbEiBFt27Yl61FXV+/Vq9eUKVN9fHzECnJibVTK
hjC1Gv7111/36dOnRYsW5EfSdg0NjfXr15MsFx0d/e2335LHolWrVuxVH374
4cGDB//8808pNxoYGMhulPSK/EhuNWzYsH379r1580ZgyQaeM3fv3l2yZMmQ
IUPYtpPttm/ffvDgwWQkIjYcADgNiYIKtJ2L2Nnz448/JjP1kSNH7Ozs3KqR
qxwdHclMqqamtmzZMj09PWdnZ1tb2x9//PH9998ns+quXbv++usvshi7PLse
t/8SZStMPblFxK0Tqamp5OYDBgz4/fffBVby22+/kcvJtWQZCdb8999/79+/
n0SRHj16HDx4yL4aSTvdu3cn0U6sICf6RqVvSO2Gk3h28uRJEsasrKy2bt1G
whVJbnv37h07dizJVwJXde7cOSwsTMqNjhw5kmz39OnT5LYWFhabNm0iN+/U
qVNwcHDNko0+Z8iThCRGsulTp06RLZLtGhkZkUFqaAwVseEAwGlIFFSg7VzE
TqZkXg4JCXn48GHNDpny8vKhQ4eSyV1XV/fSpUuvXr0iqYZc++DBg6CgoP79
+5NJPykpSWA94m6lvtuKtfVff/31gw8+UFFRSUxMFNhuQkICuZyEmZq39sRa
c1ZWVteuXUli8fDwuH///l/VyH9I3mjXrp3oQU76Zkq2BhLVoqKinjx5Qob9
xx9/3LxZvnHjRnI5WXj48OExMTHCVy1dulTKjZIUFx8f//Tp07dv35JoXVZW
tm7dOnL5okWLBNrSQAP79OlDrvL09CTrIVsk2339+jUZZFRUtCgNBwCuQ6Kg
Am3nInYyPXPmDJl2a19O5m5y+fLly1++fClwE7Kktrb2O/99v1KUICe8lfpu
K+7Wjx8/Ti7ZvHmzwMKbNm0il584cUKyNe/fv59drcDnwciP33//vehBTvpm
SrYGCwuLf/75p/bC6enp7FWWlpZ1XvXee+9JuVEbGxuBhVNSUsjlPXr0ELi8
gQayb77funWrzmsBQOEhUVCBtnMRO5mWXLkicPn48ePJ5TExMXXe6ubNcnLt
kCFDBNYj7lbqu624Wy8uLlZRUSEhpHbkIP8nl5DLi4svSbZm9v3T5ORk4SWT
kpJED3LSN1OyNdy/f19gyZ9//rnhq1RVVaXc6MOHDwWWfPXqlcCa67ubNT7/
/HNyFcnhpPnk5nUuAwAKDImCCrSdi9jJVPjTZR06dCCXz507d01dli9fTq5t
1aqVwHrE3Up9txV363/++ednn332TvUn7WsuDAgIIJeMGzeu9ju5Yq25TZs2
5Mear3nWVlFRIXqQk76Zkq1BeP/nP//80+hVTbdRgcsbaKC/v3+HDh3btWs3
YcKEJUuW7N27187OLj+/QGAvIgAoKiQKKtB2LmInU+H5UVVV9R0RCKxH3K3U
d1txt04YGRmRS+bPn19zybx588glxsYmEq9ZRUWF/L/OY5KQUNrwXZbm7kjf
kAbGJvpVTb3RBpZ//fq1u7vH2rVrP/zwQzIMkugGDx48ZcrU48ePk6vqvAkA
KBIkCirQdi6qbzLt3Lkzudza2tq9QY2uR7Jrxd06UX7rVsuWLckNHzx4QH68
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
y8rKYtdD/ig+depUzYU8Ho8s5u/vX/u2586dCwoKys7OLi4uJotFR0eTl0ry
ynkxKUl4E2Rtrq6uZJIqKioiL9pkoiFbCQwMrFmsoqJi//79ZDJ68OBBzYX3
7t0jl5CXxBcvXohyR44fP+Hk5Jyenk7+umd3EZC/qck4d+/ZQ9rFbp0Mlcx0
5PWZbK5mkiULs2soqaXhNTNCM4go23r48CGZuMkU//r165obkv+TS8jl5FrR
x3zt2jX2Vp6enjnVPDw8jh07ptgTRDMHOfzmyvlvLtNkv4Yyb1QDLzIgFmVO
FBQpc9vr/Cusvj/KyIxMfiRzAfkL+o8//vj777/Jv+RVhZ0RvL292cUeP35M
XiLIiwz7Y0hICLk2NzeX/BsWHs5U76s5dvw4WYa8pokyPLKGV69ekb9V//zz
z4KCAnLJjh07al+Yn59PLqzZIotMXmSBv/76i2yOLPbLL7+QF2GyGPk7VHgT
Pj4+z549J6siC//+++/sbgfyqlizGLnczc1dYNIhd5lc4unpJfBmSn135P/a
uxM4ucoy3+MgiqMM6lxR9DM4gogK6oh4GRl1EBFwGxEdFFzvzFwNayBbJ52N
BELIvhKQhOz71tk3spKVzr52d5be00m6k973pZb7pF45t6aquvpU1Tn9Vtf7
+34ems6ps9VT/Z7zr3327DmXL19paWmx5pfjsPThnXfekdON2rrsqhyxVbvG
jx8fsgb7aw5fxM62ZIr8Iv/ct2+fteDevfvUDOrhApv7rM74smMyW1uA/DJr
1myCnCMYuV105Do1DB1vVPiuIj4mJwqNTG67GrlZ7QgZ13InLjBzdshK1Jxy
j0/9Uw4pMudzzz2n7k6+9tprAwYMkEOH/FRHGDkLPP3MMzJ/8BMQUXZPzi/W
lMbGxvYmyl3s4GXlOLlly1a5EzplyhT1MMWYMWNkth49eoRvoqSkJHiiHBJl
olyF4IkFBYVPP/10Wlqaul7V1dV9+vSRE5Pcu49+Layt5OXlhUwfOnSoTJcW
TfqfpFEhuxo9yIWvOXwRm9tSR3jplTpnyU/VN5ke03rk5g7fsdzc3NQ+WXRy
kGPkdrmR69QwdKNRqT02O43JiUIjk9sefeSGXCqjXv4pR4CQ2cKPCXPnXb0L
fOrUqcrKSpk+K/DSaPnZvXt3OZbu3btXLp03f77N3Qs+a1ivlg+faL12xR+4
rzp27Ni+ffvJFuUY3i1I8GzWJuRebfDEiK/Jl3nk7rAsvjPwvNLmLVtkBjmE
dnhSs7ZivdDIIrundkl0CxO8q+3dUu2tOXwRm9uSG0hOec8//7w6zRUXF8vv
1knQ/nrUX0vIy3Wss3mHHeuikvM1cozc5Bm5Tg1DNxqV2mOz05icKDQyue0x
nQ7kjp78M/hNbYpMkek9e/a0phw4cKDb1RflrsrMzJRf5Kf//fuYx48fnzlz
ZrfAUzbx7Z6diVOnTpWjmZxSd+zYceTIETkxZWVlqSd3bB67Ik5XT3+8+uqr
DQ0NcsqW30+ePNnhtYiyFWmaTJfzY3sPrcS3nxEvsr+tefPmy5wrVqzwB54J
kt/nz18Q63pefPFFma26ujp4l6qqqlL7ZJGcQY6Rmzwj16lh6EajUntsdhqT
E4VGJrc9ptOBevB/06bQ93lt3LhJpsvdQ2uKnL6feeaZMWPGzJgxQ+4tqlcU
y0/5fdGiRenp6XJpyCne/u7ZmaiOlrm5uU1NTXK/Wz09Ice6BE8HjY2NgwcP
fvbZZ+fPny/XRc4Lzc3NHV6LKFtRr0tfv35Dh2tQ999D7lZHWXP4Rfa3lZeX
J5vr379/bW2t/JTf8/LyY13PyJEj1QkreOLu3XtS+2SRnEGOkatx5Lo0DN1o
VHsHGcTE5EShkcltj+l0sGvXLvlnenp/uQ+oXsEuP7dv3yGHd5m+Z88ea045
qsih8oUXXkhLSxs2bJjX65WJ8vOVV17p27evHEiHDx/e4cuM29s9OxNlK/LP
rVu3yjFQjnI1NTUHDx5Sb5FL5HQgNmzYINPVw03Shw6vQvS1yT1o6Ybs7Zo1
a4qKiurq66UtcoopKys7fPiw9Sp00adPH1nDiRMnQg6z9oOc/W21traq9xjO
nTtXvW9RpsS6ns2bN3cLvG/x2LFjDQHyi3owhCCXOEZuVxm5Lg1DNxrV3kEG
MTE5UWhkcttjOh3U1dW9/fbbgTNC+qhRo8aPHy8/+/W7ei6YPmNGyCtwli1b
3i3wao0lS/7/R27K7+pO3/LlGX4b4j4dLF++XO3n6NGjZT/l56BBg/7617cS
Px3IGVA9USUHUjmE2rkWUdYm96bXrVv33HPP9e7dWw7CY8aMmTBhgiSBESNG
DB48WE461pxvT5+ucpFcnQkB0dccfpH9bYktgdcRqbOenCzi2Ofq6mr585Cb
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
PJ4VK1b853/+57e+9S1Zg/yU31euXCXT21vDnj17/vKXv9xzzz0yv1y7ESNG
1NSk8mdoIG4ag5zl8OHDctGnPvWp8IscH6Hnzp178803//SnP/3Lv/yLNR4H
DhyYnR3hHZQEOZjA5EShkcltj3IUra+vl4uuu+66kJknTZr0uc997sYbb5SL
rMXb2trkIP9P//RPH/vYxz74wQ+qV+x8+MMflrPJAw88UFJSErzm5ubmvn37
ykqsmYV6eY+sIfrunT59+stf/rLMGX3B9q5aVVXV448/Lun0ox/96Ac+8AGZ
QX7K75/5zGefeOKJ6urq8DVMnjz5lltuueGGG9T8st1/+Id/eOSRR5qammy1
GCZJhiAnwSxk5PpdG6G33nrrTTfdJCPIOhpYr9ObN2+enX0myCHFmJwoNDK5
7VGOooWFhXKRBJiQmT/5yU/KfflZs2bJHf/TAf7A+UuFq169em3atOnkyZNy
3//tt6dL6JIDu8Se1tZWaz19+vSRE4Qc+bt3775+/frjAfLLkCFDvvrVr0bf
vd/+9rdyArr77rsXLlx48OAh2dC2bdtGjRr9zW/e0+FV83q9svjfBQwePPjd
d9+VxeXnwIEDr7/++o985CN/+MMffD5fyBrk+n7ve99bvHix7OTevXtfffVV
uZoy/9SpU2PrNQyQDEGuqKhILpLxGLJjbozQO+64Q2aW0ZGZmZmVlbV///6M
jAwZR9cEXmF74sSJDveZIIcUY3Ki0Mjktkc5iqalpclFDz74YMjMX/rSl86e
PdvQ0CC5SE2Xk8InPvEJOR2sW7euoqKipaXFd/WDw7z19fUS8+6880654y+H
dzWzHOrVOWLFihXl5eVqZiG/VFVVSXqMvns33nijTJGVNDY2yiZkQTkB1dTU
yMmrw6u2ddu2j370o3Iu27hxo2yrra1NFpeflZWVa9eulV2SS7dv3x6yBklx
xcXFsjmZ2ePxVFdXS/CT6Q888ID9Pn85RvbXjKSSDEFu0KBBctEPfvADa4p7
I7SgoEBWKKNDhoYaIE1NTWVlZcOGDZN9eP755zvc51iDHEMJSc7kRKGRyW0P
OYrKofjKlSv79u37r//6L7n/LhctXbo0ZOa3p08PfthK9O7dW6bLPf3m5uaQ
9cuc8+bNl0sff/xxNeXZZ5+Vf8o9fTtPTYYf5CVryZS8vLw4lpUrJVN69uwp
p6SQmWXP5aQjl/73f/93yBok44XMLKdFmS6RssN9CFmVffbXjKSiMcjJfatj
x4716dNHMptctGjRYusi90Zoey5duiQr+eIXvxh9n9ubGAVDCUnO5EShkclt
V8e64Duwt99+++c+97kbbrhBpsvxX84OITMXFxeHrOSuu+66JvAoWcRNyN1z
ufSzn/2s+qcc2+WfmZmZ9ncveMrDDz98TeBRsoyMjPLy8piWve2222TKgQMH
Is4v8VUu/cIXvhCyhpAXzgk5wV0TeImRnaugnI6RnXWeOnXq9/j978+dO2f/
hnBbJwe54JF7xx13qJfAyV9menp6fX29NbN7I1Ts2LFD7hw9+OCDd955Z/DO
yEquv/768H2OeEXsXm13hlI4uVun++9avzlz5sTXPcOZnCg0Mrnt4Xdgr7vu
Ojkd/PrXv165cmVFRUX4zMGvpVE+/OEPy/Rbb731S5Go84L10ms5tss/a2tr
7e9e8BSJYf/rf33yQx/60M033yyZ84EHHpBz1vbtO6zneaMsK0tF2XRNTc01
gZdqh6wh5OFHf+BBjGS4sy/J8w7ccUdSfZGBxg8EtkiOCgkwLo3QlpaWp556
6h//8R9vvPFGNbjChe9zxCuSWDOc993vflf337V+w4YN0307dEkmJwqNTG67
OoqeCXL27Nn8/PzS0tLwZ2HaO+Ree+21UU4rIYd09d5Pm8/ahG9RYuSJEycG
Dhx47733yqlHTh8f+9jH5FTy6KOPVlVVRV82+qbVe/1kng6vb/SLOo3scD7y
88P/UDXq5CBnDdusrKzdu3fLpuVemMS2H/3oR21tbdbMLo3QKVOm3HDDDTIG
e/TosXTpUrlncfLkSbU/OTk5XTrIFRUV6f671i/6Ux5oj8mJQiOT2x7TUbS9
mT/1qU9dE3ji5kxUauabb75ZZpa4GPcWvV6vZLbi4uLs7OyVK1f26tVLspyc
vHr37h19WbWf7T0TJ3t4TeCtdh1e3+gXRRTxkZAo7K8ZSUXXa+TU23Zqa2uP
Hj0qf8PXX3998PfruTRC//mf/1nmnDVrVkVFhQQ/9X4HdZHcE3QpyDGUkORM
ThQamdx2R4Lco49e/VaglStX2VnJr371K5nZ5sku+u7JWaO5uVlOIuvWrZPZ
brnllujL/uQnP7km8Dl4EdcmuySX/uxnP7Oz9VjPPnYeDwlmf81IKtrftSpp
atas2XLRbbfdZj1W6dIIVU+nhrwAQ5k7d65LQY6hhCRncqLQyOS2x3Ssa2/m
lStXynS5e37lypUOV7JmzZprAg98ZWVlObV7xcXF19h4ZfWcwMnls5/9bEFB
Qcgazp49K7skl86fv8DO1mM9R0R/JKS9x0bQ5WgPcv7AR3nfddddH/jABxYt
WqSmuDRC//7v/17m3Lt3b8h0GY+33nqrS0GOoYQkZ3Ki0MjktjsS5BobGx97
7LEPfvCDd99997x584qKiloDLl++nJmZOWXKlJ/85CchM18TeOm1XJSXl9fS
0tLU1JSbm7tgwYJf/vKX0bcoq3rjjTcOHjxYWVnp8Xhqamv379+vvij8oYce
ir5sbW3tvffee+211955552yrbKysra2ttLSUtnnL33pSzLzfffdV1dXZ6c5
3NlHRMkQ5MTUqVPl0m9+85vqTUAujdAnnnhCZpPRtHLlKomIMppKSkpmz579
la98Rb3Qzo0gByQ5kxOFRia33ZEg5w/cB5cjvBy9P/WpT8nx/4sBt9122y23
3PLJT34y5LEyOY/8/Oc/vybwpQmf//zn1czyy6c//em/+7u/i75FWZUsJav9
whe+IEvdfvvt8rssJdsN+brViHt78uTJr3/967Kfsi3ZPbWTsqz6tohTp07Z
vL6cfRBRkgS56urqz3zmMx/60Ie2bN2qprgxQrOzs2Urss6bb/6MGo+yZjWa
1CfXEeRgIJMThUYmt92pIOfz+UpLSxctWiT35W+++WY5tsvB/OMf//i3v/3t
vn37bt68OWTmS5cuzZkz56c//elNN90kc8r8n/vc537zm98Ef/5wxC2uX7++
e/fu99xzz0c+8pFrAt98euedd/bo0ePEiRPBb9Nrb289Hk9+fv6IESPuu+8+
9dnC8lN+HzVqdGFhoVxq8/py9kFESRLkxKuvvioz/Pj9h9rcGKEyXo4fP96t
WzdJgzLPddddJ7lO1p+RkVFZWUmQg5lMThQamdz2swFOzdzY2CgnC0lKas68
vLzz58/LIT38o+f8gQ+il5OFzKNmLigoKCsrC/nQg/AttrS0lJeXy2pzc3Pl
onPnzhUVFVVUVIR/jlx7eysnqZqampKSErUG+Sm/y5SYrm9MfYM5Oi3IdfgX
WF1dLTOEfHy34yNUxt2VK1fkIjUY8wOfXKTmCd/DiPvMUEKKMTlRaETbATii
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
JFdWdUnmVwu+2LNncJdyTp+R9ai2/PRnP1OzSee/fd99NoPcH/74f2QT0ijZ
GYltZ3Pz5CLJkA8//Ii1WikVwOSKny8psdYgnVm/YZPVgeD9DL41Q25x66aU
6tm7txXCCXIURVHuVfQgN3To0BntI8glIWeD3KbNmyWQSH44cvTqOq1T8He+
+739+w80B8749Q2N8svJrOwHfvCgzDx9xkyJamrxwqJilaOsuCX/yQwyRWbO
zDygopRcMn/BQllWVpuVffUdsiGnfpkoF8kix0+cVGuWBbdu2yb54V++fZ81
MSTIybISJ2TKk0/+7szZc2qiZM4Zs2bJtmRZdRWszUlJFDlx8pTaq/KKSsmo
dt7rIZlQZvvVfzxubaU58ODkc88/L9PT+qXX1TcEd0+2PnnKFNUl2dau3Xvk
WsjELVu3WXuu5pQ1yHrUROmwinY2g5yUtFq1vT7wP4lqv37iSZn+yrDhV8or
/vY3UHZZgmVIkjx85JjaJemV9dia9Fk9PKi2LgtKY0Pmkc2sXbdBevvVr339
wIGDwe0lyFEURblR0YOcHbFukSDnKqeC3OUr5XK+Vg+wWI+5WafgESNGBT/h
KDHh5ZeHqenW42OqJMv99Gc/s+JW8fmSf//5o3L2l4gYPJusXwKPzLl5y9bm
sFN/xDexyoZeGjL0kR/9eNXqNWpKSJCTpWRDDz/8iHowKnhB2U+Zs3efNHW9
1PrD39Mh2em+f/3O/fd///SZs+31sKa2TnLR9/7tfolzIRft2LlTBTz11LPV
PWu7qqRfsgbr+Wsp2Q3ZGemGdC94hSpf2Qxyj/3qV5culQZPnzlrtgqHIblU
Qt2f//IXK0lat6a0N+TWlOv44A8fGjVqjCTDg4cOy035+z/8yXpiXZWs/Nnn
npPFly5dZt0QBDmKoiiXKnqQ27x5S0nJhegV6xYJcq5y/HPkgp90s07B1jla
lXoGNvhBGKskCQwa/JK1yL5970lg+N3v/yhBMcqOhZz6jxw9fs+37v3G3d+c
NXtOSGwIrpAgJ7koPHOqUiv84UMP5+blW5uzEldIf6zHCWMt9UCirEHWE6V7
4Xs+cfLkiHtu880Oam0v9uwpITN82dVr1oYvMu3t6VaSlCZIKyLemjZLrkjw
ThLkKIqi3CsV5CKSiw4cPOT4FglyrnIqyP3ve7/drdtT72zZEvzYUXunYJVY
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAcMX/A01T/7g=
     "], {{0, 519.375}, {313.125, 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->{192., 192.},
     SmoothingQuality->"High"],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{221.87500000000006`, Automatic},
   ImageSizeRaw->{313.125, 519.375},
   PlotRange->{{0, 313.125}, {0, 519.375}}]],ExpressionUUID->
  "f31e5cea-3874-4c24-9c85-7e1bf62897bc"]
}], "Text",
 CellChangeTimes->{{3.9191715844302597`*^9, 3.9191718909424953`*^9}, {
   3.9191726220476136`*^9, 3.919172736056068*^9}, 3.919174730776085*^9, {
   3.919174867692973*^9, 
   3.919174880209508*^9}},ExpressionUUID->"8a2b4b15-833f-4d3c-a19d-\
885912e59fc7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"truePositive", "=", "389"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"falsePositive", "=", "146"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"precision", "=", 
  RowBox[{"N", "[", 
   RowBox[{"truePositive", "/", 
    RowBox[{"(", 
     RowBox[{"truePositive", "+", "falsePositive"}], ")"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.919171892718001*^9, 3.919171934054247*^9}, {
   3.9191721848574305`*^9, 3.9191721898893147`*^9}, {3.919172733315833*^9, 
   3.919172827807104*^9}, {3.9191728774817953`*^9, 3.919172884758317*^9}, {
   3.9191730432395496`*^9, 3.9191730913263817`*^9}, {3.9191731499546776`*^9, 
   3.9191731524949694`*^9}, {3.919173589281189*^9, 3.919173589420032*^9}, {
   3.919173680570881*^9, 3.919173680834462*^9}, {3.919173807863511*^9, 
   3.9191738337857237`*^9}, {3.919173912095369*^9, 3.9191739122537193`*^9}, 
   3.9191739479921074`*^9, {3.9191749983350677`*^9, 3.9191749985754204`*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"656b9da9-96eb-48be-b273-d6ddda2c7eef"],

Cell[BoxData["0.7271028037383177`"], "Output",
 CellChangeTimes->{
  3.919172801409355*^9, {3.9191730610043783`*^9, 3.9191730974000983`*^9}, 
   3.91917315429675*^9, 3.9191735902090254`*^9, 3.919173681557745*^9, 
   3.9191738370376153`*^9, 3.9191739151998463`*^9, 3.9191739483995934`*^9, 
   3.919174999661173*^9, 3.91949037342054*^9},
 CellLabel->"Out[72]=",ExpressionUUID->"5df5f82b-5c70-4941-8a5e-1147baa09939"]
}, Open  ]],

Cell["\<\
Contestualizzando all\[CloseCurlyQuote]esempio precedente, il modello di \
Intelligenza Artificiale ha come scopo identificare i pazienti affetti da \
cancro. Dunque, definiremo classe positiva quella dei malati. Essendo pari a \
0 il numero di malati classificati come tali dal modello (cio\[EGrave] i veri \
positivi sono 0), il risultato dell\[CloseCurlyQuote]intera frazione \
\[EGrave] 0. 
Un\[CloseCurlyQuote] altra metrica da considerare \[EGrave] la recall la \
quale mi indica quanti elementi rilevanti (i positivi)  vengono recuperati.\
\>", "Text",
 CellChangeTimes->{
  3.919172743565545*^9, {3.9191739582980824`*^9, 3.9191740255521917`*^9}, {
   3.9191740945003924`*^9, 3.9191741131107183`*^9}, {3.919174171922186*^9, 
   3.919174172523738*^9}, {3.919174207948348*^9, 3.919174218937331*^9}, {
   3.919174334631486*^9, 3.919174336181599*^9}, {3.919174584788938*^9, 
   3.9191746170754566`*^9}, 3.9191746794217253`*^9, {3.919174744826972*^9, 
   3.91917478791776*^9}, {3.919174855943005*^9, 3.919174866967497*^9}, 
   3.9191749219200478`*^9, {3.9191750068867693`*^9, 3.919175011991816*^9}, {
   3.9191753957176375`*^9, 3.919175407376403*^9}, {3.919175498633058*^9, 
   3.919175525837172*^9}},ExpressionUUID->"31df6a30-b417-4b59-b298-\
6643002b0760"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"totalPositive", "=", 
   RowBox[{"Length", "[", 
    RowBox[{"sickTestData", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"falseNegative", "=", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"recall", "=", 
  RowBox[{"N", "[", 
   RowBox[{"truePositive", "/", "totalPositive"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.919174937002817*^9, 3.919174943055702*^9}, {
  3.9191750253223248`*^9, 3.919175091906245*^9}, {3.9191751424753447`*^9, 
  3.919175212729168*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"7af52375-3315-4af1-9e2d-3bf2920d4f2a"],

Cell[BoxData["0.9974358974358974`"], "Output",
 CellChangeTimes->{3.919175213154524*^9, 3.9194903754156466`*^9},
 CellLabel->"Out[75]=",ExpressionUUID->"00301e3a-1096-4fdb-9c01-69945f656603"]
}, Open  ]],

Cell["\<\
Questo paramentro mi indica che la mia net ha imparato bene a riconoscere i \
malati.\
\>", "Text",
 CellChangeTimes->{{3.919175536257594*^9, 
  3.9191755517238593`*^9}},ExpressionUUID->"417f2d37-99d2-4b5e-afd7-\
cc6156f4149c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Some examples", "Subsubsection",
 CellChangeTimes->{{3.918671149467453*^9, 3.918671151994692*^9}, {
  3.9186723666501675`*^9, 
  3.9186723675492764`*^9}},ExpressionUUID->"14e1b333-1d9f-354f-a124-\
25695ab4a6c1"],

Cell["\<\
Preparo quattro esempi, due di persone con polmonite e due sane.\
\>", "Text",
 CellChangeTimes->{{3.9186723744559383`*^9, 3.9186724020059147`*^9}, {
  3.918734434310711*^9, 3.9187344352369432`*^9}, {3.918734545620265*^9, 
  3.9187345465326805`*^9}},ExpressionUUID->"b65587f3-9e5c-bf41-b59b-\
5731d845418e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"mynet", "=", 
   RowBox[{
   "Import", "[", 
    "\"\<C:\\\\Users\\\\raffy\\\\Documents\\\\university\\\\LM\\\\1_anno_1_\
sem\\\\modellistica\\\\Mynet\\\\trainedModel3.wlnet\>\"", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.9186712584937572`*^9, 3.91867143862327*^9}, {
  3.9186714746273117`*^9, 3.918671504804735*^9}, {3.918671543298752*^9, 
  3.918671585884485*^9}, {3.918671661399534*^9, 3.918671701586556*^9}, {
  3.918671779857689*^9, 3.918671793563036*^9}, {3.918671853277617*^9, 
  3.9186718713071804`*^9}, {3.918671934241266*^9, 3.918672039266874*^9}, {
  3.9186720710394783`*^9, 3.9186720904296045`*^9}, {3.918672188158249*^9, 
  3.9186722216067047`*^9}, {3.9187337123306503`*^9, 3.9187337124362288`*^9}, {
  3.9187337436189394`*^9, 3.9187337437899675`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"967e2443-2aa9-7c48-9f22-8d925ef2e8a8"],

Cell[BoxData[
 TemplateBox[{
  "Import", "nnincmpb", 
   "\"Attempting to \\!\\(\\*RowBox[{\\\"\\\\\\\"import\\\\\\\"\\\"}]\\) a \
network that was produced using version \\!\\(\\*RowBox[{\\\"\\\\\\\"14.0.2\\\
\\\\\"\\\"}]\\) of the Neural Networks paclet in version \
\\!\\(\\*RowBox[{\\\"\\\\\\\"13.3.0\\\\\\\"\\\"}]\\). This can cause some \
issues.\"", 2, 44, 7, 32166735236851837008, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.918733591242462*^9, 3.9187337139027214`*^9, 
  3.918733745446455*^9},
 CellLabel->
  "During evaluation of \
In[44]:=",ExpressionUUID->"3e7b4552-6a13-425e-bfc2-f92dcf118e69"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Print", "[", 
  "\"\<\\nEsempio di persona affetta da polmonite\\n\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"firstExample", "=", 
  RowBox[{"sickTestData", "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", 
  "\"\<\\nEsempio di persona affetta da polmonite\\n\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"secondExample", "=", 
  RowBox[{"sickTestData", "[", 
   RowBox[{"[", 
    RowBox[{"102", ",", "1"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<\\nEsempio di persona sana\\n\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"thirdExample", "=", 
  RowBox[{"healthyTestData", "[", 
   RowBox[{"[", 
    RowBox[{"56", ",", "1"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<\\nEsempio di persona sana\\n\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"lastExample", "=", 
  RowBox[{"healthyTestData", "[", 
   RowBox[{"[", 
    RowBox[{"97", ",", "1"}], "]"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9186712584937572`*^9, 3.91867143862327*^9}, {
   3.9186714746273117`*^9, 3.918671504804735*^9}, {3.918671543298752*^9, 
   3.918671585884485*^9}, {3.918671661399534*^9, 3.918671701586556*^9}, {
   3.918671779857689*^9, 3.918671793563036*^9}, {3.918671853277617*^9, 
   3.9186718713071804`*^9}, {3.918671934241266*^9, 3.918672039266874*^9}, {
   3.9186720710394783`*^9, 3.9186720904296045`*^9}, {3.918672188158249*^9, 
   3.9186722216067047`*^9}, {3.918672261762917*^9, 3.918672351721889*^9}, 
   3.918672414743063*^9, {3.918672496908922*^9, 3.918672497365539*^9}, {
   3.918672548026287*^9, 3.9186725737052093`*^9}, {3.918706369218857*^9, 
   3.918706454526575*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"f18eed76-d9a8-644a-8a33-17196749d78c"],

Cell[BoxData["\<\"\\nEsempio di persona affetta da polmonite\\n\"\>"], "Print",
 CellChangeTimes->{{3.918672314735618*^9, 3.918672353863184*^9}, 
   3.9186724153470583`*^9, 3.918672498000574*^9, {3.918672549162594*^9, 
   3.918672574360254*^9}, {3.918706304325409*^9, 3.918706329205227*^9}, 
   3.918706433881956*^9, 3.918706491022461*^9, 3.918733664038945*^9, 
   3.9187341628146553`*^9, 3.9190735327522535`*^9, 3.919162032079551*^9, 
   3.9194903803336873`*^9},
 CellLabel->
  "During evaluation of \
In[76]:=",ExpressionUUID->"31f6bb59-2219-4508-997e-3ac95d9495a5"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJx8vHV0XemVL2hmyzLbMjOzXWa2yGJm6eoyMzMzM6PoitmyXeWyC1xVSSpJ
BSrpJF1JGtLTL7PmvelZM+/N/DOzP7mqAy+Zs2wt2YJ7fmfv/YPvfOcewrLq
icuWLFnCWwMf6ntFD7ncXklDIfyjicmjkJgEfDmTTyARuDew6Nt+9+3fjYXb
9xw8euLk0VPnTp+6Utra0UskkakkbEt7a21lTUNjXWsvDtPZ0Ynpau/EEkkE
IpnOEYqFfL1aqdIbtEqjwRYbmXv/9cJ4XM+h0DgKqdzg8IbiQb8/ks5lErFM
XzbT15cdSbkMWqPV4bQZtSq5REil0YiYbiyRwOBxORwWlUxnUCnwup3dPZhe
PJnOltljA6MTU2Mjg9lEwGFSyOVSIYdB5TCZTHxzbX1VdcmjJ3eu34dTrK2p
b2xoaWpqaW5oasfjsL1YPEAgE3C93e0tBYXbiw4cPXEK8J07915JQ1sXpgeD
w3a3tDVVPa1uaGru6OnpbO9Ar9qLxRFJRDKNLRCLhCqZRKYx6LUme2z60x9+
9bNf/+zTyZjDarPo1FqdTm9KREKRRDIajGb6+wfyI/mJvqDdoJbwWCwWm8Ph
sOkcHh3bQ6DzJWq9XinmCwRcGplCJnT3kuhcidoQTAxNTE9PTkyMD/cnvUal
AtCxmCw2g0LEtVWWPS1/+uTB4zvXH1TXNwC+hvrmxqbWlsbmDhwOTyCSSCTA
h8V0tTZtKty2a/+RE6dPnDp3/vKt4qpOgNOJ6e1pbq5/WlYNP9DV3dmGQOOI
RCyWQCGTqUyeUCSUi4UihUanNThyr7/+9dc/+eKzV5NJl1FnVErgkKlcDrsr
EImEw+mBwfz4xPhQ1CwXsIjdGDyFyUVoJAoBGUcTyBWmQNAKFRXzaPAVjkCi
1Bptbqh+pn+gL5OeGB8dTHl0EpGAw6TT6Qw8prO1tqy4tKTs0YNHt288qqpv
rKv9Fl9rc2sXFk+kUCkkIg3w9XQ0128q3Lpz7+ETp8+eOXPuyu0nTzu6uzug
Wp2NDdUlJdVNLe2dXZ0dXRhcD5ZAwMPP0qhUOpvL5UpEQrFMqVTorclXX//i
8xejY8PZkE2nUgrZbC5PrICvS5Q6g8HkCkYSuYH+pJXV3dGDxdE4YqVGo1ZL
FCoxk8oWiYT6WNqt0wqFPBZHqtEZTFab3eHy2NyheDIRjw/255Ihu0qEqs4k
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
+YGBXDY3OApGDkQ/EoNrgBbR3KGgS8cj9GK6MQSKa/b3//iv/y3ii6RdNqvc
qFIIWFQ56wCY54LC7Tu2AswNa1f9tXf5E77C9RtB+3ddrMQIoEwqjdZs8Qdz
n3/57MMvv/ow6w+YzFaX16EVcxg0SHcCrhg9cgEyT8bhqEwGJD6ZnEfsrCt7
+LCRp1Uq9F60UT4YDA8tvPns+69Gh9LJaCgQCATdgUgiO/HmR29ev5idfTY7
NpbPj02M5PMQBlNZaNWx/GB+MB2BYfQ6nH6/yyQkdC++QYNq9o+/+t3/M+Xy
hG0mk1SvlANNK3nH1mz8Fl8B4Fv5t/EtX7V2/YZ1GzetRepOlKlkMpVWb7d5
AoOfv335w1//aMLv9Oksbo9NI+ah58gkUgGTzmIziJjO9s72xffuIGBw2I76
8vvvXb/5FM8Xygw2bxTtNYsMv/z08y8+mJyGxBr0ev3BUCzdl5/9+Iev3n82
PTM3jXLh6OhQP9QvlYglsv2jIxOz00PJaDwR87vdbpdRgOvs6u7pldje/I/f
/Px//NBj81oMRrlOIeNz6CrROfAmIBHbAd/G9Wv+Nj5woGvXbYA6r1xz9Ekz
Q62WLr6BgsfnH/nxl199849vUpCjwdZrRBwOevsTKodLAxnHdrc1VZdWVNW3
drS3NDc3NzXUVjy+e/dhDY4lVFnRA38Q3+ODLz797LMP5t//4PnsxOjI6NjQ
yPjk9MKbL96+fjY1MTk+MjqQ68slozHw37lUKjeUyuSnZ8cGckPDQ5kQWDGX
hk2hc/gCV+7tf/vDV//6b0m712Eyq/QquZBHV0qvrttYsKFgK8K3Yd3qFcv+
2ny+E/iVa9Zu2LR5w/K1J5928bQqtE1f5gqEQxO//t03v/liOAieN+hQslF+
J2La27u6WuubGmsqa2pLF5/XbayvrqirramtrSovqWwAeyrROy3An15/KJKa
ef3J21cvPnr94av3XyxAcJ97Nj///MNPPn81PTo8DKmpL5WMBTyeVCaXy2QH
hpPpwYmp0TxI5tRYXyrTP5xyatU6g0E3uPCb//7rn/7HmMvnNZvVkG9FfJpc
emv9xoL1GyG+Lo7f38O3YjWMKSTDjeersUKtXKzUqmTOYMSb+d5Pfvn9mWQ4
HnFb1Rxib093V097Y11NVVlx8eM7tx5Xld66W1JVU1NTWVZRVlZe+ujhY3Ax
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
6+jrHS/+P3z/DbHCwZI=
    "], {{0, 224.}, {224., 0}}, {0, 255},
    ColorFunction->GrayLevel,
    ImageResolution->{72, 72}],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "Grayscale", Interleaving -> None, 
    MetaInformation -> <|
     "Exif" -> <|
       "ImageWidth" -> 224, "ImageLength" -> 224, "XResolution" -> 72, 
        "YResolution" -> 72, "ResolutionUnit" -> "Inch", "Software" -> 
        "Created with the Wolfram Language : www.wolfram.com", "DateTime" -> 
        DateObject[{2024, 3, 4, 10, 56, 10.}, "Instant", "Gregorian", 1.], 
        "TimeZoneOffset" -> 1|>|>],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{224., 224.},
  PlotRange->{{0, 224.}, {0, 224.}}]], "Output",
 CellChangeTimes->{{3.918671439327406*^9, 3.918671507867611*^9}, 
   3.918671590325735*^9, {3.918671669257721*^9, 3.91867170297316*^9}, 
   3.918671794516796*^9, 3.918672030529939*^9, {3.918672075735225*^9, 
   3.9186720911759777`*^9}, {3.918672194541397*^9, 3.918672224135824*^9}, {
   3.9186723148463917`*^9, 3.918672353863184*^9}, 3.9186724153470583`*^9, 
   3.918672498000574*^9, {3.918672549162594*^9, 3.918672574370239*^9}, 
   3.91870630446706*^9, 3.9187063410140114`*^9, 3.918706444292198*^9, 
   3.9187064910381145`*^9, 3.9187336750244684`*^9, 3.9187341628146553`*^9, 
   3.9190735327537613`*^9, 3.919162032126808*^9, 3.9194903803336873`*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"53406b1e-1347-4cf3-802d-e8c6b9162174"],

Cell[BoxData["\<\"\\nEsempio di persona affetta da polmonite\\n\"\>"], "Print",
 CellChangeTimes->{{3.918672314735618*^9, 3.918672353863184*^9}, 
   3.9186724153470583`*^9, 3.918672498000574*^9, {3.918672549162594*^9, 
   3.918672574360254*^9}, {3.918706304325409*^9, 3.918706329205227*^9}, 
   3.918706433881956*^9, 3.918706491022461*^9, 3.918733664038945*^9, 
   3.9187341628146553`*^9, 3.9190735327522535`*^9, 3.919162032079551*^9, 
   3.9194903803336873`*^9},
 CellLabel->
  "During evaluation of \
In[76]:=",ExpressionUUID->"5033a509-1084-48a0-bcf0-1f03e7461138"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxkvAd7ZNd1Laix5TFztv2kZ8mWJctKlphJkRSDGJvdZEd2buQMVAFVqCqg
cs4555xzzjkHxGaTtGXPzDc/ZfYpkHrz7Et1iwDR1XfdHdZa5+xzf7KwfWXl
L773ve/tPgS/XZnfew+PnydffQq++AK7u76KXV46hyUsry7jX19AP/b/fvvr
3t07d2fm5udmb65fn11YvTQD37h5/eqVa1cuXbpy5crlC59d+PSTjz8+d/fG
lcu3V7C4D99+7fW33//gj59+fvna7fmF2ZllzDYGg9+nCbQ2pycYDYXDkUg0
Gk3EE8l0rliutXvtciaZCifSqXQ2k4hniqVSpT3otJu1UjYZT8VCwRD8gUg4
FAqHAj6rSaeSCVhUIh6zvrKyvHz35sWPP71y7fJnH37wxTabTaEyGKTlu8sE
Fk/A49C37sx/8dnnly5evnHnDuCYnV9YXl5aXJifn9tYWVxc3djYADz3ZuHr
matLu4ufLW7eu3fv7u2bN67f+OLKlWvXrl35/PPPAN+58zdn5m58fml2i7X6
6VvvfPjBux9fvXfv9r35peVNHA6L3SUzhVqb2x+KRtAVDocTyVQmX641W71h
r14qlpK5YqFYLuWyhUqlVGn1e51GOZ9JJeF/yVQ6lQCACGXIYTVqFGIuk7q3
s7m+sYWZu3P1s08//uC9C2sivZzD4ipY6wtUdzJos2jEfA5l+8bFTz+7dPnq
TbjvmbmFxaXVleWlpaXl5a31ldUN7DZ2bhZ9f2FheWPu3t3ttc9n4IIQ3r51
44tr169/ce3K5YvnP/nk/Of3bl+/dv3W7CKeycNffee98+eu3p2ZWVxdw+AI
uzs7JBpXrLX70S1Go7FYLA5XIpUtVuqd/rDfqtXq2VK1UqlXi+VqrVKuNHuj
fqtSyGWzmUwGfkughxKNx2MRn8uiV8tEPA6NsI3dwe9uXrlw8/I7n+9qtSoJ
X6J3GpgMS0izu3zr+sVPPrnw6UcXz0MmXf3i5uzsHARvZW1jfXUFft/axmxu
beN3CYvzs3MLS0uL1zGLN9X/TzoyD7Gcnbl7B5L0+vUb17/44tqlC+fOfXbp
9tVL12fm7t2exzDEAuLsRfhPN+a3MGs4ApGAJ1DZIpnOGYIbBGyJVDqTSaUg
HQvlaqs7GLQBUrpQLpYqpVy5UimXKs3ueNhr1crFQiqZSCbj4UAsGokhfCGv
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
Zz/N+Os3t+9XtQ2zMYzckqiBjDiizw5Qes9r3OWzWSxa/wCdyWKM0od6Bund
j658e+P2jStXrt+4defuvYKSskd1PfSJybkVImEAbhviLrM7AIfPj9kJdBOv
4fORjl4sFLDY7agcYLXoNll9PQMD3UPdLU31dc2dvb1tTYNL6yuzc+zZxdXF
yUkWm8tbk+jtYfhW+9/9Z8hqsWOZggybkBYnBzqe3L72h7feBt+XDvAyMx//
7izgy0xPyTh14tRbPz71129u3a9qHWbzsDREojbqTJ695wfx+F7AqpWszTMn
GRBazrIYTAZ9dLir6u7VG3fv3/r26u1rZP1Kymrr+yan2HwRtlzrrdhTCvjQ
uhB8QUwOogeMAIP3+P0eJ6WEbbE47XZgwU6bQSlgYvFYc31tzZMnDZ1NA4ON
1X3c7YWlxflFgYA7vzA3vyJWKLWe/YM4LOCew2wzGfVSCh+jv7XmztVf//gk
2Z6I78nvz2aeyMrMSOI78SY+jUln9h88348n9r1GtXxjgcGYXeIvz08xlkaH
2ROPbt4ruHHl+p3bN67h+St4UFLa2tA7NbeCTRM6vclmgROot3hCkfBr+LCb
NhIJ+oiKJLYdOwAgMGFXIOi1m82K5fG+tvr6utrqyrKqhr625tamZtrqOmdh
lb+wIuWvzM/wpGqZHFhpYu/g8DkcQLNZLyH4OIz+5tq73370w9STBF9WZmbN
H87nnExPy4QFTUs9+bMf/fLGzbtVDSOzyyjeo9Ka9a5IDPxxPObSyCTbK3Oj
Mys8NnNqfmSeO/y4qKjk+o07d65d/vrGlat3CvLvFj1pGZzm8IG7K+UqIxwo
YO9WdyASCZOjBywXQrRoPB6BjQo/gXDblXwAox0Mqstp1im32H31zVWlFZVl
lbXVdU2tGMyvQfS1uCoC4sxZXJdptEarN7a/v/9s/9CudVplSoVkW7Q6T+9p
rrl2LetHGWlpePgysvNq/3iMLzX15Fs//vA6hY8nEvB3VBqD0RePRxOJiNOk
kknE6/zlxYWFxfmpicV5ekNRwUOIym7fvX3t6vXCe7dv3y6o6RuZXlkTbu7s
SHchOjPo9Bb42gHgDxDBAMH1IQkEfhQDwOFgAPgS1fYPVN6J1Qc2CxJB2dr0
cH/Lk8qKiqrq8kdPUVW+jsldE/AFawKUnga/pTJb7D6IQOOJ5z6Dw6Y8xtdS
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
JTU7Ky/vzNm87Lz3LS2ff5CZnZJ5jO83l67cethEW1yXHoSsLx28Fd6G3mIw
WTUam5bZ0FBWef/G/dvXixsbWnrHWMzx7p7hifH+9rbajuGxMVpvS8cQxHEC
8bZEqkTBTwPQQJs3FKGs5/fw+Qg+nEZtszutqHdJhgGbcdOiNg+msqUaC7k3
U8pEnGnGYFtHY1NXV8fYqlymMoP9cRi1csd3ce9+QrWxxR1uenSELzcn70xe
7vlfm1ou/jwLE/Sv8H2D+DgCxT+D1v/SLC/ObblMcqtO7rAt0ujdFU+K88se
FLU2tfaOz7CG29u7+gfaqus72zq7+0fpA60dA3QGe3VzE2VpsToZAhA8gDGq
fjf6PXwe7D8i45rdsGSIz2k1mh2YyU7OtVJKdjVOj1G6JZfxWeMTjLaunq6e
weEBtULncFutHrNBan6+54k/02xuLw01Piq4ffM04svJyjlzOu/nv/cOffJe
bmpKdlYmAEw7+c6P/nDpy3uVzeMCjvGZI/CdhL8woXQpLCad27UzNzHY3vS0
tKj0SUNL7QCTOcXqezzYUlX+tBF1xzt6ervbW7p6hsZnl4WbW3KdwWSDsESP
8hM4YgT5AlWcTGVjkPh5vUh5rVagTTjgCMCh7glOd3DbsCMCfDsglBttVrFC
wpueRm2ejh4GAw6FKugwOF16v1Yt8/3TE3xhEW6vjPY8Krx59aO30rIwuQs7
9Nw578inb+D7MeC7C/hWlmwH9vCzLcHsssJmARNm1wmmGaPdbXXlJWXVLZ0T
Q2Pzk80N/fWPS8ufNjTUNjQBi2hvaezqGaDP8IDiKlHk/whfEEteSEVBMJlh
ioSDpHaC6NmbcWQlKt44bG4nprNtNrAr2DqlkquUEqnGZFKqFZvL8zPMsenh
9pGZib4pscNrx+Iao37X/l3A99wu2loZ7aok+LB0gsJ33jd64f3ctNSsI3w/
+eOlS4hvadWbsMUTqyuzUqnWLTPZ9RtzTCa9p7m+pgaIbS99bGJ8uLuju7Dg
QdnT+vrauvpGYPJNwAn7aTN8eNtqo4mElYDPDfiQC2EiCfMtmGAi5S9+kgGF
9bO7HKRBHgcpoGN32JxA/1AfVqpUSndk4CP0ql3B3AybNsPo7QU2PbeiDvhN
Jq/Nbt3WHMach+6tjZWR9grA94u3AR+sYN6Zc+ff849dfD8nPS3zCN9P//Tl
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
EpDcX+ItO05UdRNxIrQjFmqCr0FHJBt0EK6ZiYI7Kl/DLygVEqARa9zRka6a
J42tja0VzUKtgM3bnhPNKtzhfVciLBTO0etex5cL+BLahj99kJeSmZ6VmZ6e
ceqtlE8/+/RGaRd9fnsv6Hnm1gqBHS0usBkzK8MF3165VnS76MG1r+5UNQC+
3oHBwaHh9prK4nv3i0tKK57UtXT2jIwMj07MQJC6LZGpwBraDTqLG5VRiMKb
x+NzOb3A20NH9SI+l42KWxAfzj3XK+VKnIYJzt4A3G93F1dQrVEpJSLB6tLc
QFdb05OHZU/bnzwd4a+vcAWbCwqLLPDPoPfFzgYQ+PvXLn+elpqekXv2DPj3
s7n7+qY/vZ976jV8FxDf2Lxq3+s7sCilaq10jQPEgV5x887dm3dKH9z85tqD
J3Xt7a3NzW09AwNdOJa0n0an0eiMGc4Sqs7z17d2tiRyhcYC9t+AhT6BIJYv
ebACzen0+uFgk/gMfurAolajXkuCFzC1wHeJbjuOaUTPgfOK8XrJatFLUcOP
NtDb11lTUlBZU9/C2JKuCdb4aqvC/jLiOVCv8en1gO9iemp6Zs7pvCzAl3dg
av0T6SBL4kv97MJnNwEf27lvDSaUuwaVUi1ZmZvn1N28de/+/dtlt7++XvK0
rr61rb2zjza1sLiwuLLKXxWKhPCjSCwVilDWSC6XwEvX2zGJorfifiT6RGAx
3Q7EhzdK2JLr85HLTJvZgGLkYInwShfjFblaiyOOTEaio4+60l6nQbHNm6H3
oehF6Z2S9o5HTTwIS3livVWler7njjqW+OM1+dcuX8pAfHm5Wdmnz57et3X9
5VzW9/F1j7EjMX0surNt0qo0KjFvrqO4sPjG9cL84lu3Smvrahta+xiLOGIY
Rc5kO9tbmEPAScfbKHinkMuwuNyCsopWOH7eQJikP3F+p8uD3j4RTqaXSPoT
jCi2umAlPfbrmIAykaGPLvQgdiKc7fR47CaNmD850NLU2lJTWdnaUvaIJtwR
8bRmq1aceO72RbgrjOqCq5cvZ6emZZ3G8uTc06cTjr6/vonv889ulnWPL+wF
tHuBrR2NQadQa0TM/Ltlpd9+e/9mQUFZbX1NUx+LK9Ya9Sq5BIcoS3FmAlHA
h5OC3gs8thG+ElA4n9PmcLt9YSyXR74Oawf/HT0IJ9OhTotWiRbSiN1KuEXx
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
BiU=
    "], {{0, 224.}, {224., 0}}, {0, 255},
    ColorFunction->GrayLevel,
    ImageResolution->{72, 72}],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "Grayscale", Interleaving -> None, 
    MetaInformation -> <|
     "Exif" -> <|
       "ImageWidth" -> 224, "ImageLength" -> 224, "XResolution" -> 72, 
        "YResolution" -> 72, "ResolutionUnit" -> "Inch", "Software" -> 
        "Created with the Wolfram Language : www.wolfram.com", "DateTime" -> 
        DateObject[{2024, 3, 4, 10, 56, 12.}, "Instant", "Gregorian", 1.], 
        "TimeZoneOffset" -> 1|>|>],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{224., 224.},
  PlotRange->{{0, 224.}, {0, 224.}}]], "Output",
 CellChangeTimes->{{3.918671439327406*^9, 3.918671507867611*^9}, 
   3.918671590325735*^9, {3.918671669257721*^9, 3.91867170297316*^9}, 
   3.918671794516796*^9, 3.918672030529939*^9, {3.918672075735225*^9, 
   3.9186720911759777`*^9}, {3.918672194541397*^9, 3.918672224135824*^9}, {
   3.9186723148463917`*^9, 3.918672353863184*^9}, 3.9186724153470583`*^9, 
   3.918672498000574*^9, {3.918672549162594*^9, 3.918672574370239*^9}, 
   3.91870630446706*^9, 3.9187063410140114`*^9, 3.918706444292198*^9, 
   3.9187064910381145`*^9, 3.9187336750244684`*^9, 3.9187341628146553`*^9, 
   3.9190735327537613`*^9, 3.919162032126808*^9, 3.9194903803336873`*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"deb0941f-9788-4d59-89fc-8f47c5890191"],

Cell[BoxData["\<\"\\nEsempio di persona sana\\n\"\>"], "Print",
 CellChangeTimes->{{3.918672314735618*^9, 3.918672353863184*^9}, 
   3.9186724153470583`*^9, 3.918672498000574*^9, {3.918672549162594*^9, 
   3.918672574360254*^9}, {3.918706304325409*^9, 3.918706329205227*^9}, 
   3.918706433881956*^9, 3.918706491022461*^9, 3.918733664038945*^9, 
   3.9187341628146553`*^9, 3.9190735327522535`*^9, 3.919162032079551*^9, 
   3.9194903803336873`*^9},
 CellLabel->
  "During evaluation of \
In[76]:=",ExpressionUUID->"2e5a201f-0447-46d2-9769-ba12ee6ae99f"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
ulqqK4pzMqxsPpPC0qWl2eFn8bg8Oi6GRCKzOVy5Wq23OdPT05LSczPTnAkm
R05RQV5Rcb6n8b++2Tyb6untbPbmJ+kUqNcLHhP56MtP3/3J1SvXb965E6Jn
38F3/a33Pv7qcWR0HIlMYYme4+vsOdhc+ctcdVp2QX52dkFpTXVJpisjNy8j
2QbZWyzmsJlMYO5kDBadrdHoJDqTyZXpTTptQiokjZTEzJKqBv802p1YWYf8
8hzf1tbqNLqE1FRdWZqbYRfEYXEsgzNRa9VLODwBm0RlkeGD0IQcgVwfDxUI
ojAlq8iT40atMQsQZd3989bhSm+vr9lbmGKQf4vvk9+8fBXU+z/A9+bvP/oy
DG1REElc5bf4hp/Ob/6/HbnutLS0jAKgW3UVnkJPQVayBQqSgAcFmMwUCBl4
tPcYBxCxqKGoIj7dqdS6UhOc2UmZxVXNfdOLK6hRAZS+w9NTcNHTw/29DbQX
7m+pq6/25KTqcDiy0Oq0q0Sg5AQyMZcroOPBhFwqK5Rp4kG3OzM95WVl+ZlZ
IASTswpG/rK3dRT0+5q8xelm+Bk0Ig4T8fCLj3710pV/gO/W5Wtv/O7DLx49
jooj4EgCw3N8rQv786cnNTm5Kdbkooam2qLKujpvkdOoUciVcj6TTiOR6Dwe
BYMeHcTGYrC4mDiWRJOYm6tXJyXaXIXO7JLaztH5xTW0NkH6nZ4dH5+dAk/b
XpgcH+7vbO1orSzOd4oFIq3DZdeIxSK0B8cFh6WymHQeRyAWsDkilSUlKzsz
u6iqtaoA4j4xIyu7+S/HK38ZQKchpTnx5/hiwx989qdf3Ll89eat7+O7+vpv
P/j80eNILB5HEpm/jb/DhY3/Z6rSk+VMTK9obqourwMG6jbLhDw+OCeNwqBR
qYgYxcbExMRi8QQ6Ds83JKYXZiUlOROSMrJduWUNvZNLy+iVzdrG7uHR6dnJ
ydnp0fHx3srczORIoLOnu6GqvMBqsjhzshJ1ZjN4vYgHEptKoNFpXJFExCIR
mWKB2pFbUlENv3uVx6GzZubkVj19uvxfI71dzd6y/CQlwhcX8/j+p398+9al
f4Tv0tXX3n3/s4fhkbE4PFXyLb7ev0zu/H89ZYWpmQVFRaXehi5ffX5yvAnI
NYfDYbEgldMpJBKFRiaBW5OpNBGHp03NLy5NhfrizshxZXqqmnonFpeAl0GJ
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
xlNXfsH3P4WjYeE=
    "], {{0, 224.}, {224., 0}}, {0, 255},
    ColorFunction->GrayLevel,
    ImageResolution->{72, 72}],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "Grayscale", Interleaving -> None, 
    MetaInformation -> <|
     "Exif" -> <|
       "ImageWidth" -> 224, "ImageLength" -> 224, "XResolution" -> 72, 
        "YResolution" -> 72, "ResolutionUnit" -> "Inch", "Software" -> 
        "Created with the Wolfram Language : www.wolfram.com", "DateTime" -> 
        DateObject[{2024, 3, 4, 10, 55, 22.}, "Instant", "Gregorian", 1.], 
        "TimeZoneOffset" -> 1|>|>],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{224., 224.},
  PlotRange->{{0, 224.}, {0, 224.}}]], "Output",
 CellChangeTimes->{{3.918671439327406*^9, 3.918671507867611*^9}, 
   3.918671590325735*^9, {3.918671669257721*^9, 3.91867170297316*^9}, 
   3.918671794516796*^9, 3.918672030529939*^9, {3.918672075735225*^9, 
   3.9186720911759777`*^9}, {3.918672194541397*^9, 3.918672224135824*^9}, {
   3.9186723148463917`*^9, 3.918672353863184*^9}, 3.9186724153470583`*^9, 
   3.918672498000574*^9, {3.918672549162594*^9, 3.918672574370239*^9}, 
   3.91870630446706*^9, 3.9187063410140114`*^9, 3.918706444292198*^9, 
   3.9187064910381145`*^9, 3.9187336750244684`*^9, 3.9187341628146553`*^9, 
   3.9190735327537613`*^9, 3.919162032126808*^9, 3.9194903803493357`*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"73269db6-345e-41e2-a39a-5f44c78b1a94"],

Cell[BoxData["\<\"\\nEsempio di persona sana\\n\"\>"], "Print",
 CellChangeTimes->{{3.918672314735618*^9, 3.918672353863184*^9}, 
   3.9186724153470583`*^9, 3.918672498000574*^9, {3.918672549162594*^9, 
   3.918672574360254*^9}, {3.918706304325409*^9, 3.918706329205227*^9}, 
   3.918706433881956*^9, 3.918706491022461*^9, 3.918733664038945*^9, 
   3.9187341628146553`*^9, 3.9190735327522535`*^9, 3.919162032079551*^9, 
   3.9194903803493357`*^9},
 CellLabel->
  "During evaluation of \
In[76]:=",ExpressionUUID->"0b41d9d1-2eff-437c-9170-53c96fba6dc5"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvPVfm9n6LlxvxzvTTt1LS6m31IWWFiju7u4hQIAIkkASIFgCCREkuGuI
uwsulenY3uecv+S9V9rZ57v3MGe/5/v++O77M2VK8+TJutZt17XWenI+HRue
vWvHjh24A/AjPA3vWVqaRow4CL9EFeHycoqyMv2KyrJyskofpaPL/sfnP/+x
/9h/7D/2H/uP/f/bdu7c+dcv7gL7/PKu3dA//3Tpzl27nC86b+S8avcf1/xx
Y+f/d6J7/Zf3f/rL7r1/+kT09r37dn16I3z6bnTDnf/4/Y9b/18B/DQIp/3T
yHft3vPni/9xESDfuevzb//0efC2vX9ct/Mf8/PPnwcv7P40M7vhgp270Y0Q
lj/Q//N40Ef98/h2/ov9nwH++Trn3KGp3Ltnz569+/Y5X3CO+7+8C43MOdT/
ffsvD+z947d/uA/93INuBH/+8Tk7d+/ZvevPY9n1yc+7//gdIO/+rzP0r7j+
edw7/3THz3O5zSf9+TqEY9cftmcP/PIJ3y4UQTs/f7pzUHv3Oi9HsbULftm3
by+gQfOz2zlvzqiHv+3Ztx+mbO9u+AGzuBtuum/3jp17IWj2/teB7/yMc7fT
vzudt/iLUf4Z36cB7tn1vz/2j/vu2gvD2os+dvfefbth9vf8Y5bgc9BH7Tuw
D14H9+5Fo0MBtge9DQ3wD//vRBnkBOP0zueQRdf+c9wi6PDSnj+m8g88yNF7
9/7b6f9rvzjxoQj8ZHs/G0z8/u9+PHrk5MlTp89fvnrjlW9oVHR0VFRsXEJy
akZWdlZ+fk4hsZZSR62j1FRT6qqrSEQiqaq6voXNaaGUYfJyc7Iz0pKTkhIT
YqPCQ4Iio0J9fEKjIuOT0rJycrIyM7Jzc1IjfV/edb937+4d93t33d1v37hx
5/69Rw9uubldu+bqevmSy8UL5y+cOXHsyPdf7P7yyy8O7IeZ279/n3Mmdv2L
QQzs2b1NFjpnETx14LPt/2x7d+3a//3x02dOnT5z3vWG+0Of0KTsfGxFVQOj
hdUp6BH2j44OTmkXl1bX15cs5sV1h81qNlttDuv6L3/77ePPv/7973/7/def
f/rwdmt92WbUqpWqhZGRBZVybevnv/+v//X33377/fdf3y2bNPbFpUWH3bFk
MFuMOoNtWWMxzAyNTwx1C3gcVmsToxpfnJ8RH+zlfvfWdbdLF88fP3b44Ff7
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
OKzmBiqxKCunAFuCyUhIz8zJRb7LKywuw+PxFWXlJbkJ4cEhfiDjXrhD9j2J
yY/YtePPAboHSsyPz154v37lHRCZnFlYmJ+Xj8VXkUiE8tKivJy8rKzcrMSE
tJR0+EtBXmZMbGIOqRWKdzub3SnoFgyOz8sVcolYBfgUSrVGrlADQKNlGYXo
OmSnY2kFmsAmysaNVUjW5bc///4bOjgJgJetIOPnQR+PDQ/2CHqEXTweD+GD
AsrltjPqKrGZWExBYREmNyMrJ7+gAP6KLSknVFZVVZLxRfl56VF+AX5+vp73
b950f5GQG7LN/sMOFLM/Pn/h7eMXHJ2SU1CIwRQVl1dSaqsIFRVlRXn5WdkF
2YmJmVmFxcUlZaWYrJS4RExda1trO7sDyiiXK+gdGp+cGJubX0DbzQqpQqWG
hDKtrG9urS+adWarfRm5cnNzC9UaKDQffv3b77983FoDX9qNGoV0Huru+PjY
QK8QlDvafuDzOKw2Do9Tj8fm5+CwhYVFRQU5OZB2MDRsOZ5UTa6traVV4Yqx
eYlhIOH8PB/cvnPvdWK633bHIz/h83jlF5EMxTc7q6CssoZModDJBDyRWFpY
kJ1TmJOUlJVZVFZaUlpcUJyTEJNBaGhubG1rYcIk93QJegaHh4Fqz6CVMokc
HRBBi7uL61vAOU1Gsw1CEiIV4KGa+e7Dz7/99stP77dWHTabRSufmpmfn5kA
OjY4MNQv4PE5XL6Ax25rbuN2UrE5BcXYImxpGVSCvAJUVbDFlVU1lDoanV5b
RyFiMtPSgHn4eT68e/eed2Ki1zb4du7auWfHQQ/PoLgcTEFuXkFBMZFCra0m
khmNJAKlqhiTiy3Lz8zOzCkswZVAYhYVZicnZuFqnKvmbR2dHL4QVO7IMIxx
cl6ODkiqITyBeIMIfLfhMKPtaKtjZc2+vLK0srG1vr75/uPPP0GDXFpcduhk
kvn5uVknmx4dGerv5nI6+d0CDpPJ6mY3VJYUlRKxkGjFEDbZWBwmr4hArqU1
NjHqaVRSNZVeVZRbmBD8xv/Nk3sPnr2OTXnzyVv/2h/27DgRFAZ1JT8vD1NS
jCPW1NaSqymNjNpqSnV5US4Wl5+dl1NUUo6vqCgvxxYXZKRmFeEqKQ2twDFY
nfyegeGR4eFJtN8nkSs1zgVO50LS8tqK3WQ2m0wWO9DwtfVVQLy5BdL3/RZo
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
OPjkxOjojEyj1arRgqFYphDPTIsUSCrJoZxKRWMcfFJYeF5CaHhcYkJ8VAzw
mLTc4mIQhKRaGq2zd2xet+gwzA6z6PXkSufjxSj3CrAlxflZwF0QvNBAP5+g
AI/79266XLl2/c6x7eIT4bv38NUbHy8vb2+vVz7+oRGgkRJTciDoikqwzv18
oO7kiioGUzA8Mjve39vbzW5ugvZHgu6QkBgdFpOWHB4QF+ETgalt6x5Cx7Rm
p6bGhocGBoBiqzWgV+dmp6HCzIlkKqDaStH0zNzkqLClJDYwIDI4KCoxKT4u
MjY+Li4pIyc1O78AW0EiNnGEE3Lr0qJR2tNIq4UArQGAQM8KgHWAPkpPSU6M
jQwN9Ef4ID5dXK9d2xYfoqT73O+98Hrl6fn69auXL7yDIqKBpaVkQofHlpYW
FOHQskcFhQjqtXdmXjo7IhQApaBUlmELc9OTgMD7+YVFhQdEBfvElNQ29QyN
j49PTU+MDfUJe4Tj0A90WiXaXYCqAz5ED1RLZuCKoT4eoyTG/018dEwy1IqE
qPi48LDYxPioxPSMnKLS0kp6e/eEZvXDln26rZZSQyRTKMDQSsugHpQW5WVl
AGVCx7P8vAP8PB6437jkevXane3qJ9pf2Xf3zlPPly9evnrl+dLjtX8YSFxQ
LFm5hcU4nJO+AP8k0FupDdNWrXR6sKu9gVxdUpidBp8RGxoR5v8mICQ4IMzX
K6GC3iYcHhsdnYDYHBD2dAsnpCqdGT0WiB4FlyqApBn0asnMxPjEUJ+gFZ8c
5BsbEhieAPGZmJoABA9EXXxqWkZuIaaESG0RiFb/59aamg/kEPKyrgaPK8ND
PJUWgwAE90UE+/u+8fZ74/HgzjWE7/bR7fg1FNC9t28+9HwB+F6/Bif6hQCl
T01KTsspxJbiwMrK8aCQaM1NvbZ3oBsELDq+GAucOhbYeCz0TBCOYcF+ga9e
JUOH7BkYGugfGh4a7u/p7gJ8aoMNfZWBWqOUKzQahcSoV0vnJsfHh/u6WNWZ
oW9C3vhEZiFBlxYXEhoTGxGVCLwrPTsHg6usax2x/8/FFcdEXTWVSAQCVVGK
q0Dne4oxuVkpCVEhft6vX7329np+75aby+WrV29v19+d+G5ec3/h4fHylZfX
q1devqGxyWkQMcnZhUDOPm2E4Un1VfUjtt82xZNdTXWE/LS0hLjoyEjQw0Bw
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
9t7expLXblDJFcjMTWvQ6Qw6mUgoEU2NgT5Ap9K76diUjKzs7Ow8HIUDaqEZ
1YxQCjpsvs1nvu5uDqOlkVhRgMGkx8bH3Dl5LNi27cgJBPAv8B05fvjwmfOX
volLiEvOzcHgqB2Mbs7LJd/vs01EYn1bV1d7C6Orj0tvxecCsrSUjJTUrIyU
7DIqsYZcX1GGCvZJNM7ABPJSB3wqrQ5WoNOzsPP81QvEPJ8+e/kKnUvdR9aD
fqdVozcaNAqZzOqwGdRKqUgsmp6aFggEk4Od3I6GwsTslLSCgowMbAmxpbWl
paObN9gz5lxb2ppjtrIp9fWVRblpKQnREZFnDh2CAHMCNeh4r3vPv/AdCeKL
TohPzs7CVFHbGbyx50tLK4Ok5i5+P7OhrW+IR6ksSk+KT0rPykhNT02FUIut
ppAqK/FEAr6iMB8HS3aQjwLMtFRtt1ksVofbu7mPWj09B3oNgeb5/u7Tp/s7
B/hMJr1Wo4Vh1qrVcjHy/ETpTzTSzWmvL0jMBeqXkZSUmYqpofN4zBbWrGxW
61hYV/HaOC31kN5z01Pio6Jiz348viNnv7z0TTjwyoyMPDyV0cbTb3uXjKPc
nuGxAQaXx2nBZScnRcclp2ekpyRmZacnJmYVlgCRzy8lkSqqsbllzdz+oWl0
cFdmsPk8drMZAK5uw+IDiv304HzO3j5wtXU/8E+D1WqGFWpxup0Ohxk9tNeg
YKoQjfbz6NWY1BTQX6C7klJzKxqZXT19YrVSqzP7rf1MDo1cW1yQk5EcGxGd
dO7wYYQv5G/xnQgJOffl5W8exScnpqblk6h0Zs/SotkhVWiE3I6e3iEaNik+
MTEuLROUbXxCcmRCUlIuvrm5gVxb10ynNbWRq8m8KbFYJpMptCYYODewL7PV
HuSfz57D6nsJ+J7tgwzcXffZDHqgnhaTFZnwLi36nCbkIYo2RDVy0eRoD7U6
NT09OSUjPTkpNS0ls7prTjQ2rnRY9SbnYDub1lCLSrOSosNiUj878nH4Dp8I
OfrZhcu37sfBBEwrqKW2dgxtWVQahdYs7eX191Zj4qKT0xPC45PTUuLj03Kz
CopL8FR6E76mkd3ZRmezKMTatsHJKZlCpQVla3A47DbIgI53+J6/CDaKe7q9
u7+34bPqgIY7zUaLw+n1Axs3a+wW48ERf5VUNM3vqMsvLAAelZkUk5iSnIql
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
/ef6z/Wf6//n1/8DGrqs7Q==
    "], {{0, 224.}, {224., 0}}, {0, 255},
    ColorFunction->GrayLevel,
    ImageResolution->{72, 72}],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "Grayscale", Interleaving -> None, 
    MetaInformation -> <|
     "Exif" -> <|
       "ImageWidth" -> 224, "ImageLength" -> 224, "XResolution" -> 72, 
        "YResolution" -> 72, "ResolutionUnit" -> "Inch", "Software" -> 
        "Created with the Wolfram Language : www.wolfram.com", "DateTime" -> 
        DateObject[{2024, 3, 4, 10, 55, 23.}, "Instant", "Gregorian", 1.], 
        "TimeZoneOffset" -> 1|>|>],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{224., 224.},
  PlotRange->{{0, 224.}, {0, 224.}}]], "Output",
 CellChangeTimes->{{3.918671439327406*^9, 3.918671507867611*^9}, 
   3.918671590325735*^9, {3.918671669257721*^9, 3.91867170297316*^9}, 
   3.918671794516796*^9, 3.918672030529939*^9, {3.918672075735225*^9, 
   3.9186720911759777`*^9}, {3.918672194541397*^9, 3.918672224135824*^9}, {
   3.9186723148463917`*^9, 3.918672353863184*^9}, 3.9186724153470583`*^9, 
   3.918672498000574*^9, {3.918672549162594*^9, 3.918672574370239*^9}, 
   3.91870630446706*^9, 3.9187063410140114`*^9, 3.918706444292198*^9, 
   3.9187064910381145`*^9, 3.9187336750244684`*^9, 3.9187341628146553`*^9, 
   3.9190735327537613`*^9, 3.919162032126808*^9, 3.9194903803493357`*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"e8e28859-2a32-44cc-961e-0563dafba691"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"mynet", "[", "firstExample", "]"}], "\n", 
 RowBox[{"mynet", "[", "secondExample", "]"}], "\n", 
 RowBox[{"mynet", "[", "thirdExample", "]"}], "\n", 
 RowBox[{"mynet", "[", "lastExample", "]"}]}], "Input",
 CellChangeTimes->{{3.918672420362383*^9, 3.918672444703344*^9}, {
  3.918672514340584*^9, 3.918672527375389*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"581ab0d1-e73d-d447-a767-26d4c8bef513"],

Cell[BoxData["\<\"Sick\"\>"], "Output",
 CellChangeTimes->{{3.918672518242681*^9, 3.9186725781100693`*^9}, 
   3.9187065023948193`*^9, 3.918733656313223*^9, {3.918733701770913*^9, 
   3.9187337202200303`*^9}, 3.9187341678970366`*^9, 3.9190735373121653`*^9, 
   3.919162040166382*^9, 3.9194903842822943`*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"c7a33a56-a064-47da-b8fd-9843ebed3ee7"],

Cell[BoxData["\<\"Sick\"\>"], "Output",
 CellChangeTimes->{{3.918672518242681*^9, 3.9186725781100693`*^9}, 
   3.9187065023948193`*^9, 3.918733656313223*^9, {3.918733701770913*^9, 
   3.9187337202200303`*^9}, 3.9187341678970366`*^9, 3.9190735373121653`*^9, 
   3.919162040166382*^9, 3.91949038442336*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"262a246c-78a3-4878-bc24-3f0394dad922"],

Cell[BoxData["\<\"Healthy\"\>"], "Output",
 CellChangeTimes->{{3.918672518242681*^9, 3.9186725781100693`*^9}, 
   3.9187065023948193`*^9, 3.918733656313223*^9, {3.918733701770913*^9, 
   3.9187337202200303`*^9}, 3.9187341678970366`*^9, 3.9190735373121653`*^9, 
   3.919162040166382*^9, 3.919490384564791*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"678b7069-e109-4fa6-a940-f87aa46d21ad"],

Cell[BoxData["\<\"Healthy\"\>"], "Output",
 CellChangeTimes->{{3.918672518242681*^9, 3.9186725781100693`*^9}, 
   3.9187065023948193`*^9, 3.918733656313223*^9, {3.918733701770913*^9, 
   3.9187337202200303`*^9}, 3.9187341678970366`*^9, 3.9190735373121653`*^9, 
   3.919162040166382*^9, 3.9194903846898565`*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"a6f9dc3b-a2a6-492e-b01a-d26abfad4836"]
}, Open  ]],

Cell["\<\
In questo caso ha individuato correttamente tutti i pazienti affetti da \
polmonite e chi no. Fallisce in alcuni casi, infatti ha \
un\[CloseCurlyQuote]accuracy del 76%, come ad esempio:\
\>", "Text",
 CellChangeTimes->{{3.9186725906396065`*^9, 
  3.9186726771910477`*^9}},ExpressionUUID->"71bb0e99-2865-464d-91f9-\
4ea07c38bc06"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"mynet", "[", 
  RowBox[{"healthyTestData", "[", 
   RowBox[{"[", 
    RowBox[{"98", ",", "1"}], "]"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"healthyTestData", "[", 
  RowBox[{"[", 
   RowBox[{"98", ",", "1"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.9186726790322514`*^9, 3.9186727022153683`*^9}, {
  3.9186727400194435`*^9, 3.9186727411149063`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"239966a6-2698-2940-903c-1b8d7ccd0128"],

Cell[BoxData["\<\"Sick\"\>"], "Output",
 CellChangeTimes->{{3.918672733524294*^9, 3.918672747302706*^9}, 
   3.9187340922722054`*^9, 3.918734171510249*^9, 3.919490387189252*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"732feb4b-8034-431d-ad5c-1e6791e04703"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
HCZzMnHXXgf7OkcbbSouDlgZbPX5H84XlBTlXSyqrMWhySzdfHunnlhy+qP0
N+XLOuL78LOzxd5gXzuDTsPWEqV6rRLYs/L8H777pohptFtcTeG2rv7BwaHh
scT0EpznvHn5ytalS1vbyXlzMPXj+k0gy27defjwYRIQ0gHzAuzn40f39o+W
+TJYxKWlmbHhkYHuvpaGoNdbZ1CLWUyhUiXXqWQi2JDI4WlsjUaCXqeMSUSg
UGW5P5wvLMwtqARSBsgN9XQ0rkZd/PLjN+bLPJWdlZOe9pdPzxa5GuOddAYZ
jeboDRIpj4Is+Pr0t8Ucu8cdaI23xYDXGhoeScyubl46GpoLW2RtbWwcTZy7
tL0LVAsIhh5BPmA7792DiXUA78mjuzcury3DaVLwinAyMTw01BePNzWG6n0O
pVHKgM/reDqDmWyspjQ4fYGG5rYGh0GERxMJpbk/5ObllaKRKAKGylQmIu2y
qvNffvLG+zMDCJiT6akffHI23xZq66cziGiSxKjhS9jE6nOffZVH19a5/THw
64HDaMYSk3AuwKVN2McdflvJD874uwyzsm4dPn6SBDz6wFo+fPzk6eN7e1vr
GxsbqwuTIwO9sKfsQG8sGoq0tzT59AYxLCjEoQiwJo7H5UiVOqPF1RAJN4bq
RBQiqrYk93xuYTUehSZgqUzFWGOLoOT7Lz5N+4/40lLf//hsrinUPMyk4bAs
hUYO+66VnPu+lKy21vlCXX1dsD0h7OybRLqyffUy7G8GvqtXr+6Ab3sHZrTe
fvj86RPI9/DhI/Ad8T17+uDg2hacb780NdzX2RVri8aA1A5FO9siIbeSz+KL
gOalwE5qbAZVLhVLVXqTye8LhR0KFhJdW3IhrxyNQ6PxWBpLMeoNsi5+/fnH
J96ULz3Jl/L+x99fMIRCY2wyhsBXyKRKKbGsIL+MpnN4moAl74ZtwKdnF9cv
78EhCteu7WzBAk3Aley/vrOdzDnbO3j447OnjyHfo8ePHyUX8tGTZ88f39u/
DhZwdR64hd7uaKgxHG5oqG+JhkMhr1LAFUt5ZBwsq2fQqRSFgMURy/h0ncoS
bAyY2Fhs1cX8GiwG8tHZihGHl3b+9KcfvfP7fH9Oz856Xd6RdRTjZqR/mlvA
jbUMqKpwHJlCJpGycCWFBLVF5wlGYA/p4dGxCeDyLl9J9uS5vp2c+QNnAwC+
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
5dzZxt/2fVT/3vNPKWoWP3H//QUfNyr/
    "], {{0, 224.}, {224., 0}}, {0, 255},
    ColorFunction->GrayLevel,
    ImageResolution->{72, 72}],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "Grayscale", Interleaving -> None, 
    MetaInformation -> <|
     "Exif" -> <|
       "ImageWidth" -> 224, "ImageLength" -> 224, "XResolution" -> 72, 
        "YResolution" -> 72, "ResolutionUnit" -> "Inch", "Software" -> 
        "Created with the Wolfram Language : www.wolfram.com", "DateTime" -> 
        DateObject[{2024, 3, 4, 10, 55, 23.}, "Instant", "Gregorian", 1.], 
        "TimeZoneOffset" -> 1|>|>],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{224., 224.},
  PlotRange->{{0, 224.}, {0, 224.}}]], "Output",
 CellChangeTimes->{{3.918672733524294*^9, 3.918672747302706*^9}, 
   3.9187340922722054`*^9, 3.918734171510249*^9, 3.919490387189252*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"10c4e0ac-1d29-49c3-b22f-53871afc036f"]
}, Open  ]],

Cell["In questo caso da come affetto da malattia una persona sana.", "Text",
 CellChangeTimes->{{3.9186727608641853`*^9, 
  3.9186727909202137`*^9}},ExpressionUUID->"2c624c53-97f5-7446-b807-\
dc2a432852a9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1070.25, 642.75},
WindowMargins->{{-4.875, Automatic}, {Automatic, -4.875}},
Magnification:>0.9 Inherited,
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (April 11, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"79c88a42-31ce-3c44-92b5-2506ada65b56"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 222, 4, 88, "Title",ExpressionUUID->"d87364f4-d256-de46-b725-87749c7d6381"],
Cell[805, 28, 180, 6, 52, "Text",ExpressionUUID->"b7046ae3-66e3-4d5d-bf37-ffe13194c9fa"],
Cell[988, 36, 761, 12, 52, "Text",ExpressionUUID->"bd2a2a36-b07a-0945-9a81-5dd640ea9468"],
Cell[1752, 50, 242, 5, 31, "Text",ExpressionUUID->"0f9fd789-255d-4098-adab-7e0478d3caa8"],
Cell[CellGroupData[{
Cell[2019, 59, 192, 4, 48, "Subsection",ExpressionUUID->"21e51e4d-9ea6-4048-b396-ab12997903a0"],
Cell[2214, 65, 1654, 34, 43, "Input",ExpressionUUID->"33309a6d-fad9-3f44-9294-a0b7727e75c5"],
Cell[3871, 101, 3866, 94, 266, "Input",ExpressionUUID->"509163ab-f623-4192-9e9b-430b6760f736"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7774, 200, 225, 4, 48, "Subsection",ExpressionUUID->"7c64256d-5151-e94e-a61d-0568f2fe6614"],
Cell[8002, 206, 3412, 77, 163, "Input",ExpressionUUID->"d684335c-8038-fa41-a899-d4e0d36ebb08"],
Cell[11417, 285, 1222, 27, 77, "Input",ExpressionUUID->"d392e259-07c9-ef4b-9d86-4724b2384ae7"],
Cell[12642, 314, 783, 16, 43, "Input",ExpressionUUID->"2d8b797e-c2ed-fb40-be8f-f986cbaa1907"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13462, 335, 206, 4, 48, "Subsection",ExpressionUUID->"c7315e30-5929-ad49-9918-a27fdb0952e1"],
Cell[CellGroupData[{
Cell[13693, 343, 222, 4, 40, "Subsubsection",ExpressionUUID->"4413ea90-f7da-2b4c-b8bf-ec05189511be"],
Cell[13918, 349, 1660, 35, 94, "Input",ExpressionUUID->"6e52c61f-6939-1148-9214-308d703a4376"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15615, 389, 187, 3, 40, "Subsubsection",ExpressionUUID->"81d4aaeb-848c-9c47-9c61-782991cb0489"],
Cell[CellGroupData[{
Cell[15827, 396, 827, 15, 43, "Input",ExpressionUUID->"d71900d6-a930-eb4b-b6ba-9b3426dafd93"],
Cell[16657, 413, 729, 14, 26, "Message",ExpressionUUID->"787ba0ac-f046-4d73-ab91-88ea437edfa3"],
Cell[17389, 429, 100230, 2007, 53, "Output",ExpressionUUID->"fb84d475-b97d-48fe-843d-dbf76751d1cb"]
}, Open  ]],
Cell[117634, 2439, 708, 13, 25, "Input",ExpressionUUID->"d355e352-792f-4081-8208-cc7899a5c19b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[118379, 2457, 274, 4, 40, "Subsubsection",ExpressionUUID->"741dd5d5-3dec-ea47-b052-4c6aa7a0589f"],
Cell[CellGroupData[{
Cell[118678, 2465, 2261, 55, 163, "Input",ExpressionUUID->"653e4cc3-76bf-df47-a6c8-41a0904dacd9"],
Cell[120942, 2522, 810, 14, 19, "Print",ExpressionUUID->"f44164a6-051a-4241-9fc0-0fe2d358493a"],
Cell[121755, 2538, 10596, 267, 182, "Output",ExpressionUUID->"a94e8838-4734-4333-b876-390410d4b22e"],
Cell[132354, 2807, 789, 14, 19, "Print",ExpressionUUID->"da2168c5-f493-44a0-bc3f-faf0758cba49"]
}, Open  ]],
Cell[133158, 2824, 117329, 1928, 445, "Text",ExpressionUUID->"8a2b4b15-833f-4d3c-a19d-885912e59fc7"],
Cell[CellGroupData[{
Cell[250512, 4756, 1042, 19, 60, "Input",ExpressionUUID->"656b9da9-96eb-48be-b273-d6ddda2c7eef"],
Cell[251557, 4777, 414, 6, 28, "Output",ExpressionUUID->"5df5f82b-5c70-4941-8a5e-1147baa09939"]
}, Open  ]],
Cell[251986, 4786, 1270, 20, 72, "Text",ExpressionUUID->"31df6a30-b417-4b59-b298-6643002b0760"],
Cell[CellGroupData[{
Cell[253281, 4810, 671, 16, 60, "Input",ExpressionUUID->"7af52375-3315-4af1-9e2d-3bf2920d4f2a"],
Cell[253955, 4828, 191, 2, 28, "Output",ExpressionUUID->"00301e3a-1096-4fdb-9c01-69945f656603"]
}, Open  ]],
Cell[254161, 4833, 237, 6, 31, "Text",ExpressionUUID->"417f2d37-99d2-4b5e-afd7-cc6156f4149c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[254435, 4844, 217, 4, 40, "Subsubsection",ExpressionUUID->"14e1b333-1d9f-354f-a124-25695ab4a6c1"],
Cell[254655, 4850, 317, 6, 31, "Text",ExpressionUUID->"b65587f3-9e5c-bf41-b59b-5731d845418e"],
Cell[CellGroupData[{
Cell[254997, 4860, 888, 16, 25, "Input",ExpressionUUID->"967e2443-2aa9-7c48-9f22-8d925ef2e8a8"],
Cell[255888, 4878, 635, 13, 26, "Message",ExpressionUUID->"3e7b4552-6a13-425e-bfc2-f92dcf118e69"]
}, Open  ]],
Cell[CellGroupData[{
Cell[256560, 4896, 1805, 37, 146, "Input",ExpressionUUID->"f18eed76-d9a8-644a-8a33-17196749d78c"],
Cell[258368, 4935, 568, 9, 52, "Print",ExpressionUUID->"31f6bb59-2219-4508-997e-3ac95d9495a5"],
Cell[258939, 4946, 56786, 935, 216, "Output",ExpressionUUID->"53406b1e-1347-4cf3-802d-e8c6b9162174"],
Cell[315728, 5883, 568, 9, 52, "Print",ExpressionUUID->"5033a509-1084-48a0-bcf0-1f03e7461138"],
Cell[316299, 5894, 53415, 880, 216, "Output",ExpressionUUID->"deb0941f-9788-4d59-89fc-8f47c5890191"],
Cell[369717, 6776, 552, 9, 52, "Print",ExpressionUUID->"2e5a201f-0447-46d2-9769-ba12ee6ae99f"],
Cell[370272, 6787, 54891, 904, 216, "Output",ExpressionUUID->"73269db6-345e-41e2-a39a-5f44c78b1a94"],
Cell[425166, 7693, 552, 9, 52, "Print",ExpressionUUID->"0b41d9d1-2eff-437c-9170-53c96fba6dc5"],
Cell[425721, 7704, 49714, 819, 216, "Output",ExpressionUUID->"e8e28859-2a32-44cc-961e-0563dafba691"]
}, Open  ]],
Cell[CellGroupData[{
Cell[475472, 8528, 424, 7, 77, "Input",ExpressionUUID->"581ab0d1-e73d-d447-a767-26d4c8bef513"],
Cell[475899, 8537, 386, 5, 28, "Output",ExpressionUUID->"c7a33a56-a064-47da-b8fd-9843ebed3ee7"],
Cell[476288, 8544, 383, 5, 28, "Output",ExpressionUUID->"262a246c-78a3-4878-bc24-3f0394dad922"],
Cell[476674, 8551, 387, 5, 28, "Output",ExpressionUUID->"678b7069-e109-4fa6-a940-f87aa46d21ad"],
Cell[477064, 8558, 389, 5, 28, "Output",ExpressionUUID->"a6f9dc3b-a2a6-492e-b01a-d26abfad4836"]
}, Open  ]],
Cell[477468, 8566, 340, 7, 31, "Text",ExpressionUUID->"71bb0e99-2865-464d-91f9-4ea07c38bc06"],
Cell[CellGroupData[{
Cell[477833, 8577, 471, 10, 43, "Input",ExpressionUUID->"239966a6-2698-2940-903c-1b8d7ccd0128"],
Cell[478307, 8589, 256, 3, 28, "Output",ExpressionUUID->"732feb4b-8034-431d-ad5c-1e6791e04703"],
Cell[478566, 8594, 52319, 863, 216, "Output",ExpressionUUID->"10c4e0ac-1d29-49c3-b22f-53871afc036f"]
}, Open  ]],
Cell[530900, 9460, 206, 3, 31, "Text",ExpressionUUID->"2c624c53-97f5-7446-b807-dc2a432852a9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

